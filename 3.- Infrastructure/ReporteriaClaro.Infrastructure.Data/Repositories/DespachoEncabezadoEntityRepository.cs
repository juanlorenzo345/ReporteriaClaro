//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 10-11-2021 01:36:07 PM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using EFCore.BulkExtensions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaClaro.Domain.Interfaces.Repositories;
using ReporteriaClaro.Domain.Models.Entities;
using ReporteriaClaro.Domain.Models.Pagination;
using ReporteriaClaro.Domain.Models.Sorting;
using ReporteriaClaro.Infrastructure.Data.Extensions;

namespace ReporteriaClaro.Infrastructure.Data.Repositories
{
    public partial class DespachoEncabezadoEntityRepository
    {
	    public async Task BulkInsertConDetalleAsync(IList<DespachoEncabezadoEntity> entities)
	    {
		    await this.Context.BulkInsertAsync(entities, new BulkConfig() { BatchSize = entities.Count, IncludeGraph = true, SetOutputIdentity = true } );
	    }

	    public async Task<bool> ExisteEncabezadoAsync(string guia)
	    {
			IQueryable<DespachoEncabezadoEntity> consultaFiltrada = this.objectSet.Where(e => e.Activo && e.Guia == guia);
			return await consultaFiltrada.AnyAsync();
		}

	    public async Task<DespachoEncabezadoEntity> FindAsync(int id)
	    {
		    IIncludableQueryable<DespachoEncabezadoEntity, DespachoEstadoEntity> consultaJoin = this.objectSet
				.Include(e => e.DespachoEstadoEntity);

		    IQueryable<DespachoEncabezadoEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo && e.Id == id);

		    return await consultaFiltrada.SingleOrDefaultAsync();
	    }

	    public async Task<PagedResult<DespachoEncabezadoEntity>> GetPaginadoAsync(string guiaBuscada, bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
	    {
			IIncludableQueryable<DespachoEncabezadoEntity, DespachoEstadoEntity> consultaJoin = this.objectSet
				.Include(e => e.DespachoEstadoEntity);

		    IQueryable<DespachoEncabezadoEntity> consultaFiltrada = string.IsNullOrWhiteSpace(guiaBuscada) ? consultaJoin.Where(e => e.Activo == activeRecords) : consultaJoin.Where(e => e.Activo && EF.Functions.Like(e.Guia, $"%{guiaBuscada}%"));

			consultaFiltrada = sortingInfo.ColumnName switch
		    {
			    "id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
			    "fecha" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Fecha),
			    "guia" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Guia),
			    "estado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.DespachoEstadoEntity.Nombre),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
			    "usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
			    "fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
			    "usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
			    _ => consultaFiltrada.OrderBy(e => e.Id)
		    };

		    return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
	    }
	}
}
