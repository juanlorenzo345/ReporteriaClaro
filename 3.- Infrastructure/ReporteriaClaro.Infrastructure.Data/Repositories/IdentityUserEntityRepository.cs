//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 26-10-2021 09:00:55 AM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaClaro.Domain.Interfaces.Repositories;
using ReporteriaClaro.Domain.Models.Entities;
using ReporteriaClaro.Domain.Models.Pagination;
using ReporteriaClaro.Domain.Models.Sorting;
using ReporteriaClaro.Infrastructure.Data.Extensions;

namespace ReporteriaClaro.Infrastructure.Data.Repositories
{
    public partial class IdentityUserEntityRepository
    {
	    public async Task<PagedResult<IdentityUserEntity>> GetPaginadoAsync(string user, PagerInfo pagerInfo, SortingInfo sortingInfo)
	    {
			IQueryable<IdentityUserEntity> consultaFiltrada = string.IsNullOrWhiteSpace(user) ? this.objectSet : this.objectSet.Where(e => EF.Functions.Like(e.UserName, $"%{user}%"));

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"nombre_usuario" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UserName),
				"nombre_completo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FullName),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.CreatedAt),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.CreatedBy),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.ModifiedBy),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.ModifiedAt),
				"activo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Active),
				"fecha_desactivacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.DeactivatedAt),
				"usuario_desactivacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.DeactivatedBy),
				"razon_desactivacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Reason),
				_ => consultaFiltrada.OrderBy(e => e.Id)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}
    }
}
