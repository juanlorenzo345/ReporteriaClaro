//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 26-10-2021 03:18:16 PM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaClaro.Domain.Interfaces.Repositories;
using ReporteriaClaro.Domain.Models.Entities;
using ReporteriaClaro.Domain.Models.Pagination;
using ReporteriaClaro.Domain.Models.Sorting;
using ReporteriaClaro.Infrastructure.Data.Extensions;

namespace ReporteriaClaro.Infrastructure.Data.Repositories
{
    public partial class EquipoModeloEntityRepository
    {
	    public async Task<EquipoModeloEntity> FindConMarcaYTecnologiaAsync(int id)
	    {
		    IIncludableQueryable<EquipoModeloEntity, EquipoTecnologiaEntity> consultaJoin = this.objectSet
			    .Include(e => e.EquipoMarcaEntity)
			    .Include(e => e.EquipoTecnologiaEntity);

			IQueryable<EquipoModeloEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo && e.Id == id);
			return await consultaFiltrada.SingleOrDefaultAsync();
		}

	    public async Task<IEnumerable<EquipoModeloEntity>> GetAsync()
	    {
		    IQueryable<EquipoModeloEntity> consultaFiltrada = this.objectSet.Where(e => e.Activo);
		    return await consultaFiltrada.OrderBy(e => e.Id).ToListAsync();
	    }
		
	    public async Task<PagedResult<EquipoModeloEntity>> GetPaginadoAsync(bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
	    {
		    IIncludableQueryable<EquipoModeloEntity, EquipoTecnologiaEntity> consultaJoin = this.objectSet
				.Include(e => e.EquipoMarcaEntity)
				.Include(e => e.EquipoTecnologiaEntity);

			IQueryable<EquipoModeloEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo == activeRecords);

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"modelo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Nombre),
				"marca" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoMarcaEntity.Nombre),
				"tecnologia" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoTecnologiaEntity.Nombre),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
				"fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
				"usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
				"eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
				_ => consultaFiltrada.OrderBy(e => e.Id)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}
    }
}
