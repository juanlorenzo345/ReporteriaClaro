//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 16-11-2021 10:13:03 AM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaClaro.Domain.Interfaces.Repositories;
using ReporteriaClaro.Domain.Models.Entities;
using ReporteriaClaro.Domain.Models.Pagination;
using ReporteriaClaro.Domain.Models.Sorting;
using ReporteriaClaro.Infrastructure.Data.Extensions;

namespace ReporteriaClaro.Infrastructure.Data.Repositories
{
    public partial class VWMovimientoEquipoEntityRepository
    {
		public async Task<IEnumerable<VWMovimientoEquipoEntity>> GetByEsnPaginadoAsync(string esnBuscado, bool activeRecords)
		{
			IQueryable<VWMovimientoEquipoEntity> consultaFiltrada = this.objectSet.Where(e => e.Activo == activeRecords && e.Esn == esnBuscado);
			return await consultaFiltrada.OrderByDescending(e => e.Fecha).ToListAsync();
		}

		public async Task<PagedResult<VWMovimientoEquipoEntity>> GetByEtapaOrigenPaginadoAsync(string esnBuscado, int idEtapaOrigen, bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
		{
			IQueryable<VWMovimientoEquipoEntity> consultaFiltrada = string.IsNullOrWhiteSpace(esnBuscado) ? this.objectSet.Where(e => e.Activo == activeRecords && e.OrigenId == idEtapaOrigen) : this.objectSet.Where(e => e.Activo == activeRecords && e.OrigenId == idEtapaOrigen && EF.Functions.Like(e.Esn, $"%{esnBuscado}%"));

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"fecha" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Fecha),
				"esn" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Esn),
				"marca" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Marca),
				"modelo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Modelo),
				"color" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Color),
				"origen" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Origen),
				"destino" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Destino),
				"operario" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Operario),
				"operario_devolucion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.OperarioDevolucion),
				"observacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Observacion),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
				"fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
				"usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
				"eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
				_ => consultaFiltrada.OrderByDescending(e => e.Fecha)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}

		public async Task<PagedResult<VWMovimientoEquipoEntity>> GetByEtapaDestinoPaginadoAsync(string esnBuscado, int idEtapaDestino, bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
		{
			IQueryable<VWMovimientoEquipoEntity> consultaFiltrada = string.IsNullOrWhiteSpace(esnBuscado) ? this.objectSet.Where(e => e.Activo == activeRecords && e.DestinoId == idEtapaDestino) : this.objectSet.Where(e => e.Activo == activeRecords && e.DestinoId == idEtapaDestino && EF.Functions.Like(e.Esn, $"%{esnBuscado}%"));

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"fecha" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Fecha),
				"esn" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Esn),
				"marca" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Marca),
				"modelo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Modelo),
				"color" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Color),
				"origen" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Origen),
				"operario" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Operario),
				"operario_devolucion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.OperarioDevolucion),
				"observacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Observacion),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
				"fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
				"usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
				"eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
				_ => consultaFiltrada.OrderByDescending(e => e.Fecha)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}
    }
}
