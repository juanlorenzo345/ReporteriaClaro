//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 10-12-2021 02:28:27 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using ReporteriaClaro.Domain.Models.Entities;

namespace ReporteriaClaro.Infrastructure.Data.DataProviders
{

    public partial class ReporteriaClaroDbContext : DbContext
    {

        public ReporteriaClaroDbContext(DbContextOptions<ReporteriaClaroDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=10.51.128.248;Initial Catalog=ReporteriaClaro_Test;Integrated Security=False;Persist Security Info=True;User ID=cellstaradm;Password=cellstaradm");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<IdentityRoleEntity> IdentityRoleEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityRoleClaimEntity> IdentityRoleClaimEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserEntity> IdentityUserEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserAccessLogEntity> IdentityUserAccessLogEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserClaimEntity> IdentityUserClaimEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserExceptionLogEntity> IdentityUserExceptionLogEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserLoginEntity> IdentityUserLoginEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserOperationLogEntity> IdentityUserOperationLogEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserRoleEntity> IdentityUserRoleEntities
        {
            get;
            set;
        }

        public virtual DbSet<IdentityUserTokenEntity> IdentityUserTokenEntities
        {
            get;
            set;
        }

        public virtual DbSet<EFMigrationsHistoryEntity> EFMigrationsHistoryEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoColorEntity> EquipoColorEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoMarcaEntity> EquipoMarcaEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoModeloEntity> EquipoModeloEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoMovimientoEntity> EquipoMovimientoEntities
        {
            get;
            set;
        }

        public virtual DbSet<EtapaEntity> EtapaEntities
        {
            get;
            set;
        }

        public virtual DbSet<ComponenteEstadoEntity> ComponenteEstadoEntities
        {
            get;
            set;
        }

        public virtual DbSet<DespachoEstadoEntity> DespachoEstadoEntities
        {
            get;
            set;
        }

        public virtual DbSet<EtapaEstadoEntity> EtapaEstadoEntities
        {
            get;
            set;
        }

        public virtual DbSet<PronosticoEntity> PronosticoEntities
        {
            get;
            set;
        }

        public virtual DbSet<ZonaEntity> ZonaEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoTecnologiaEntity> EquipoTecnologiaEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoConfiguracionEntity> EquipoConfiguracionEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoEntity> EquipoEntities
        {
            get;
            set;
        }

        public virtual DbSet<DespachoDetalleEntity> DespachoDetalleEntities
        {
            get;
            set;
        }

        public virtual DbSet<DespachoEncabezadoEntity> DespachoEncabezadoEntities
        {
            get;
            set;
        }

        public virtual DbSet<EquipoScrapEntity> EquipoScrapEntities
        {
            get;
            set;
        }

        public virtual DbSet<VWMovimientoEquipoEntity> VWMovimientoEquipoEntities
        {
            get;
            set;
        }

        public virtual DbSet<OperarioEntity> OperarioEntities
        {
            get;
            set;
        }

        public virtual DbSet<TempDespachoCsvEntity> TempDespachoCsvEntities
        {
            get;
            set;
        }

        public virtual DbSet<ApiUserEntity> ApiUserEntities
        {
            get;
            set;
        }

        public virtual DbSet<EtapaSecuenciaEntity> EtapaSecuenciaEntities
        {
            get;
            set;
        }

        public virtual DbSet<TempEquipoMovimientoCsvEntity> TempEquipoMovimientoCsvEntities
        {
            get;
            set;
        }

        #region Methods

        public void SPMergeEquipoEntity (DateTime? fechaMes, DateTime? fecha, string usuario, ref int? cantidadFilasEquipoComparadas, ref int? cantidadFilasEquipoInsertadas, ref int? cantidadFilasEquipoActualizadas, ref DateTime? fechaInicioRecepcion, ref DateTime? fechaTerminoRecepcion)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_MergeEquipo";

                    DbParameter fechaMesParameter = cmd.CreateParameter();
                    fechaMesParameter.ParameterName = "fechaMes";
                    fechaMesParameter.Direction = ParameterDirection.Input;
                    fechaMesParameter.DbType = DbType.DateTime;
                    if (fechaMes.HasValue)
                    {
                        fechaMesParameter.Value = fechaMes.Value;
                    }
                    else
                    {
                        fechaMesParameter.Size = -1;
                        fechaMesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaMesParameter);

                    DbParameter fechaParameter = cmd.CreateParameter();
                    fechaParameter.ParameterName = "fecha";
                    fechaParameter.Direction = ParameterDirection.Input;
                    fechaParameter.DbType = DbType.DateTime;
                    if (fecha.HasValue)
                    {
                        fechaParameter.Value = fecha.Value;
                    }
                    else
                    {
                        fechaParameter.Size = -1;
                        fechaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaParameter);

                    DbParameter usuarioParameter = cmd.CreateParameter();
                    usuarioParameter.ParameterName = "usuario";
                    usuarioParameter.Direction = ParameterDirection.Input;
                    usuarioParameter.DbType = DbType.String;
                    usuarioParameter.Size = 256;
                    if (usuario != null)
                    {
                        usuarioParameter.Value = usuario;
                    }
                    else
                    {
                        usuarioParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(usuarioParameter);

                    DbParameter cantidadFilasEquipoComparadasParameter = cmd.CreateParameter();
                    cantidadFilasEquipoComparadasParameter.ParameterName = "cantidadFilasEquipoComparadas";
                    cantidadFilasEquipoComparadasParameter.Direction = ParameterDirection.InputOutput;
                    cantidadFilasEquipoComparadasParameter.DbType = DbType.Int32;
                    cantidadFilasEquipoComparadasParameter.Precision = 10;
                    cantidadFilasEquipoComparadasParameter.Scale = 0;
                    if (cantidadFilasEquipoComparadas.HasValue)
                    {
                        cantidadFilasEquipoComparadasParameter.Value = cantidadFilasEquipoComparadas.Value;
                    }
                    else
                    {
                        cantidadFilasEquipoComparadasParameter.Size = -1;
                        cantidadFilasEquipoComparadasParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cantidadFilasEquipoComparadasParameter);

                    DbParameter cantidadFilasEquipoInsertadasParameter = cmd.CreateParameter();
                    cantidadFilasEquipoInsertadasParameter.ParameterName = "cantidadFilasEquipoInsertadas";
                    cantidadFilasEquipoInsertadasParameter.Direction = ParameterDirection.InputOutput;
                    cantidadFilasEquipoInsertadasParameter.DbType = DbType.Int32;
                    cantidadFilasEquipoInsertadasParameter.Precision = 10;
                    cantidadFilasEquipoInsertadasParameter.Scale = 0;
                    if (cantidadFilasEquipoInsertadas.HasValue)
                    {
                        cantidadFilasEquipoInsertadasParameter.Value = cantidadFilasEquipoInsertadas.Value;
                    }
                    else
                    {
                        cantidadFilasEquipoInsertadasParameter.Size = -1;
                        cantidadFilasEquipoInsertadasParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cantidadFilasEquipoInsertadasParameter);

                    DbParameter cantidadFilasEquipoActualizadasParameter = cmd.CreateParameter();
                    cantidadFilasEquipoActualizadasParameter.ParameterName = "cantidadFilasEquipoActualizadas";
                    cantidadFilasEquipoActualizadasParameter.Direction = ParameterDirection.InputOutput;
                    cantidadFilasEquipoActualizadasParameter.DbType = DbType.Int32;
                    cantidadFilasEquipoActualizadasParameter.Precision = 10;
                    cantidadFilasEquipoActualizadasParameter.Scale = 0;
                    if (cantidadFilasEquipoActualizadas.HasValue)
                    {
                        cantidadFilasEquipoActualizadasParameter.Value = cantidadFilasEquipoActualizadas.Value;
                    }
                    else
                    {
                        cantidadFilasEquipoActualizadasParameter.Size = -1;
                        cantidadFilasEquipoActualizadasParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cantidadFilasEquipoActualizadasParameter);

                    DbParameter fechaInicioRecepcionParameter = cmd.CreateParameter();
                    fechaInicioRecepcionParameter.ParameterName = "fechaInicioRecepcion";
                    fechaInicioRecepcionParameter.Direction = ParameterDirection.InputOutput;
                    fechaInicioRecepcionParameter.DbType = DbType.DateTime;
                    if (fechaInicioRecepcion.HasValue)
                    {
                        fechaInicioRecepcionParameter.Value = fechaInicioRecepcion.Value;
                    }
                    else
                    {
                        fechaInicioRecepcionParameter.Size = -1;
                        fechaInicioRecepcionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaInicioRecepcionParameter);

                    DbParameter fechaTerminoRecepcionParameter = cmd.CreateParameter();
                    fechaTerminoRecepcionParameter.ParameterName = "fechaTerminoRecepcion";
                    fechaTerminoRecepcionParameter.Direction = ParameterDirection.InputOutput;
                    fechaTerminoRecepcionParameter.DbType = DbType.DateTime;
                    if (fechaTerminoRecepcion.HasValue)
                    {
                        fechaTerminoRecepcionParameter.Value = fechaTerminoRecepcion.Value;
                    }
                    else
                    {
                        fechaTerminoRecepcionParameter.Size = -1;
                        fechaTerminoRecepcionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaTerminoRecepcionParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["cantidadFilasEquipoComparadas"].Value != null && !(cmd.Parameters["cantidadFilasEquipoComparadas"].Value is System.DBNull))
                        cantidadFilasEquipoComparadas = (int)Convert.ChangeType(cmd.Parameters["cantidadFilasEquipoComparadas"].Value, typeof(int));
                    else
                        cantidadFilasEquipoComparadas = default(int);

                    if (cmd.Parameters["cantidadFilasEquipoInsertadas"].Value != null && !(cmd.Parameters["cantidadFilasEquipoInsertadas"].Value is System.DBNull))
                        cantidadFilasEquipoInsertadas = (int)Convert.ChangeType(cmd.Parameters["cantidadFilasEquipoInsertadas"].Value, typeof(int));
                    else
                        cantidadFilasEquipoInsertadas = default(int);

                    if (cmd.Parameters["cantidadFilasEquipoActualizadas"].Value != null && !(cmd.Parameters["cantidadFilasEquipoActualizadas"].Value is System.DBNull))
                        cantidadFilasEquipoActualizadas = (int)Convert.ChangeType(cmd.Parameters["cantidadFilasEquipoActualizadas"].Value, typeof(int));
                    else
                        cantidadFilasEquipoActualizadas = default(int);

                    if (cmd.Parameters["fechaInicioRecepcion"].Value != null && !(cmd.Parameters["fechaInicioRecepcion"].Value is System.DBNull))
                        fechaInicioRecepcion = (DateTime)Convert.ChangeType(cmd.Parameters["fechaInicioRecepcion"].Value, typeof(DateTime));
                    else
                        fechaInicioRecepcion = default(DateTime);

                    if (cmd.Parameters["fechaTerminoRecepcion"].Value != null && !(cmd.Parameters["fechaTerminoRecepcion"].Value is System.DBNull))
                        fechaTerminoRecepcion = (DateTime)Convert.ChangeType(cmd.Parameters["fechaTerminoRecepcion"].Value, typeof(DateTime));
                    else
                        fechaTerminoRecepcion = default(DateTime);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task<Tuple<int?, int?, int?, DateTime?, DateTime?>> SPMergeEquipoEntityAsync (DateTime? fechaMes, DateTime? fecha, string usuario, int? cantidadFilasEquipoComparadas, int? cantidadFilasEquipoInsertadas, int? cantidadFilasEquipoActualizadas, DateTime? fechaInicioRecepcion, DateTime? fechaTerminoRecepcion)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_MergeEquipo";

                    DbParameter fechaMesParameter = cmd.CreateParameter();
                    fechaMesParameter.ParameterName = "fechaMes";
                    fechaMesParameter.Direction = ParameterDirection.Input;
                    fechaMesParameter.DbType = DbType.DateTime;
                    if (fechaMes.HasValue)
                    {
                        fechaMesParameter.Value = fechaMes.Value;
                    }
                    else
                    {
                        fechaMesParameter.Size = -1;
                        fechaMesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaMesParameter);

                    DbParameter fechaParameter = cmd.CreateParameter();
                    fechaParameter.ParameterName = "fecha";
                    fechaParameter.Direction = ParameterDirection.Input;
                    fechaParameter.DbType = DbType.DateTime;
                    if (fecha.HasValue)
                    {
                        fechaParameter.Value = fecha.Value;
                    }
                    else
                    {
                        fechaParameter.Size = -1;
                        fechaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaParameter);

                    DbParameter usuarioParameter = cmd.CreateParameter();
                    usuarioParameter.ParameterName = "usuario";
                    usuarioParameter.Direction = ParameterDirection.Input;
                    usuarioParameter.DbType = DbType.String;
                    usuarioParameter.Size = 256;
                    if (usuario != null)
                    {
                        usuarioParameter.Value = usuario;
                    }
                    else
                    {
                        usuarioParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(usuarioParameter);

                    DbParameter cantidadFilasEquipoComparadasParameter = cmd.CreateParameter();
                    cantidadFilasEquipoComparadasParameter.ParameterName = "cantidadFilasEquipoComparadas";
                    cantidadFilasEquipoComparadasParameter.Direction = ParameterDirection.InputOutput;
                    cantidadFilasEquipoComparadasParameter.DbType = DbType.Int32;
                    cantidadFilasEquipoComparadasParameter.Precision = 10;
                    cantidadFilasEquipoComparadasParameter.Scale = 0;
                    if (cantidadFilasEquipoComparadas.HasValue)
                    {
                        cantidadFilasEquipoComparadasParameter.Value = cantidadFilasEquipoComparadas.Value;
                    }
                    else
                    {
                        cantidadFilasEquipoComparadasParameter.Size = -1;
                        cantidadFilasEquipoComparadasParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cantidadFilasEquipoComparadasParameter);

                    DbParameter cantidadFilasEquipoInsertadasParameter = cmd.CreateParameter();
                    cantidadFilasEquipoInsertadasParameter.ParameterName = "cantidadFilasEquipoInsertadas";
                    cantidadFilasEquipoInsertadasParameter.Direction = ParameterDirection.InputOutput;
                    cantidadFilasEquipoInsertadasParameter.DbType = DbType.Int32;
                    cantidadFilasEquipoInsertadasParameter.Precision = 10;
                    cantidadFilasEquipoInsertadasParameter.Scale = 0;
                    if (cantidadFilasEquipoInsertadas.HasValue)
                    {
                        cantidadFilasEquipoInsertadasParameter.Value = cantidadFilasEquipoInsertadas.Value;
                    }
                    else
                    {
                        cantidadFilasEquipoInsertadasParameter.Size = -1;
                        cantidadFilasEquipoInsertadasParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cantidadFilasEquipoInsertadasParameter);

                    DbParameter cantidadFilasEquipoActualizadasParameter = cmd.CreateParameter();
                    cantidadFilasEquipoActualizadasParameter.ParameterName = "cantidadFilasEquipoActualizadas";
                    cantidadFilasEquipoActualizadasParameter.Direction = ParameterDirection.InputOutput;
                    cantidadFilasEquipoActualizadasParameter.DbType = DbType.Int32;
                    cantidadFilasEquipoActualizadasParameter.Precision = 10;
                    cantidadFilasEquipoActualizadasParameter.Scale = 0;
                    if (cantidadFilasEquipoActualizadas.HasValue)
                    {
                        cantidadFilasEquipoActualizadasParameter.Value = cantidadFilasEquipoActualizadas.Value;
                    }
                    else
                    {
                        cantidadFilasEquipoActualizadasParameter.Size = -1;
                        cantidadFilasEquipoActualizadasParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cantidadFilasEquipoActualizadasParameter);

                    DbParameter fechaInicioRecepcionParameter = cmd.CreateParameter();
                    fechaInicioRecepcionParameter.ParameterName = "fechaInicioRecepcion";
                    fechaInicioRecepcionParameter.Direction = ParameterDirection.InputOutput;
                    fechaInicioRecepcionParameter.DbType = DbType.DateTime;
                    if (fechaInicioRecepcion.HasValue)
                    {
                        fechaInicioRecepcionParameter.Value = fechaInicioRecepcion.Value;
                    }
                    else
                    {
                        fechaInicioRecepcionParameter.Size = -1;
                        fechaInicioRecepcionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaInicioRecepcionParameter);

                    DbParameter fechaTerminoRecepcionParameter = cmd.CreateParameter();
                    fechaTerminoRecepcionParameter.ParameterName = "fechaTerminoRecepcion";
                    fechaTerminoRecepcionParameter.Direction = ParameterDirection.InputOutput;
                    fechaTerminoRecepcionParameter.DbType = DbType.DateTime;
                    if (fechaTerminoRecepcion.HasValue)
                    {
                        fechaTerminoRecepcionParameter.Value = fechaTerminoRecepcion.Value;
                    }
                    else
                    {
                        fechaTerminoRecepcionParameter.Size = -1;
                        fechaTerminoRecepcionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaTerminoRecepcionParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["cantidadFilasEquipoComparadas"].Value != null && !(cmd.Parameters["cantidadFilasEquipoComparadas"].Value is System.DBNull))
                        cantidadFilasEquipoComparadas = (int)Convert.ChangeType(cmd.Parameters["cantidadFilasEquipoComparadas"].Value, typeof(int));
                    else
                        cantidadFilasEquipoComparadas = default(int);

                    if (cmd.Parameters["cantidadFilasEquipoInsertadas"].Value != null && !(cmd.Parameters["cantidadFilasEquipoInsertadas"].Value is System.DBNull))
                        cantidadFilasEquipoInsertadas = (int)Convert.ChangeType(cmd.Parameters["cantidadFilasEquipoInsertadas"].Value, typeof(int));
                    else
                        cantidadFilasEquipoInsertadas = default(int);

                    if (cmd.Parameters["cantidadFilasEquipoActualizadas"].Value != null && !(cmd.Parameters["cantidadFilasEquipoActualizadas"].Value is System.DBNull))
                        cantidadFilasEquipoActualizadas = (int)Convert.ChangeType(cmd.Parameters["cantidadFilasEquipoActualizadas"].Value, typeof(int));
                    else
                        cantidadFilasEquipoActualizadas = default(int);

                    if (cmd.Parameters["fechaInicioRecepcion"].Value != null && !(cmd.Parameters["fechaInicioRecepcion"].Value is System.DBNull))
                        fechaInicioRecepcion = (DateTime)Convert.ChangeType(cmd.Parameters["fechaInicioRecepcion"].Value, typeof(DateTime));
                    else
                        fechaInicioRecepcion = default(DateTime);

                    if (cmd.Parameters["fechaTerminoRecepcion"].Value != null && !(cmd.Parameters["fechaTerminoRecepcion"].Value is System.DBNull))
                        fechaTerminoRecepcion = (DateTime)Convert.ChangeType(cmd.Parameters["fechaTerminoRecepcion"].Value, typeof(DateTime));
                    else
                        fechaTerminoRecepcion = default(DateTime);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?, int?, int?, DateTime?, DateTime?>(cantidadFilasEquipoComparadas, cantidadFilasEquipoInsertadas, cantidadFilasEquipoActualizadas, fechaInicioRecepcion, fechaTerminoRecepcion);
        }

        public void SPMergeDespachoYEquipoEntity (DateTime? fechaCreacion, string usuarioCreacion)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_MergeDespachoYEquipo";

                    DbParameter fechaCreacionParameter = cmd.CreateParameter();
                    fechaCreacionParameter.ParameterName = "fechaCreacion";
                    fechaCreacionParameter.Direction = ParameterDirection.Input;
                    fechaCreacionParameter.DbType = DbType.DateTime;
                    if (fechaCreacion.HasValue)
                    {
                        fechaCreacionParameter.Value = fechaCreacion.Value;
                    }
                    else
                    {
                        fechaCreacionParameter.Size = -1;
                        fechaCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaCreacionParameter);

                    DbParameter usuarioCreacionParameter = cmd.CreateParameter();
                    usuarioCreacionParameter.ParameterName = "usuarioCreacion";
                    usuarioCreacionParameter.Direction = ParameterDirection.Input;
                    usuarioCreacionParameter.DbType = DbType.String;
                    usuarioCreacionParameter.Size = 256;
                    if (usuarioCreacion != null)
                    {
                        usuarioCreacionParameter.Value = usuarioCreacion;
                    }
                    else
                    {
                        usuarioCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(usuarioCreacionParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task SPMergeDespachoYEquipoEntityAsync (DateTime? fechaCreacion, string usuarioCreacion)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_MergeDespachoYEquipo";

                    DbParameter fechaCreacionParameter = cmd.CreateParameter();
                    fechaCreacionParameter.ParameterName = "fechaCreacion";
                    fechaCreacionParameter.Direction = ParameterDirection.Input;
                    fechaCreacionParameter.DbType = DbType.DateTime;
                    if (fechaCreacion.HasValue)
                    {
                        fechaCreacionParameter.Value = fechaCreacion.Value;
                    }
                    else
                    {
                        fechaCreacionParameter.Size = -1;
                        fechaCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaCreacionParameter);

                    DbParameter usuarioCreacionParameter = cmd.CreateParameter();
                    usuarioCreacionParameter.ParameterName = "usuarioCreacion";
                    usuarioCreacionParameter.Direction = ParameterDirection.Input;
                    usuarioCreacionParameter.DbType = DbType.String;
                    usuarioCreacionParameter.Size = 256;
                    if (usuarioCreacion != null)
                    {
                        usuarioCreacionParameter.Value = usuarioCreacion;
                    }
                    else
                    {
                        usuarioCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(usuarioCreacionParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<SPSeguimientoDespachoEntityResult> SPSeguimientoDespachoEntity (string esn)
        {

            List<SPSeguimientoDespachoEntityResult> result = new List<SPSeguimientoDespachoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_SeguimientoDespacho";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPSeguimientoDespachoEntityResult row = new SPSeguimientoDespachoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal("Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Guia") && !reader.IsDBNull(reader.GetOrdinal("Guia")))
                                row.Guia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Guia")), typeof(string));
                            else
                                row.Guia = null;

                            if (fieldNames.Contains("EstadoDespacho") && !reader.IsDBNull(reader.GetOrdinal("EstadoDespacho")))
                                row.EstadoDespacho = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoDespacho")), typeof(string));
                            else
                                row.EstadoDespacho = null;

                            if (fieldNames.Contains("Caja") && !reader.IsDBNull(reader.GetOrdinal("Caja")))
                                row.Caja = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Caja")), typeof(int));
                            else
                                row.Caja = null;

                            if (fieldNames.Contains("Pallet") && !reader.IsDBNull(reader.GetOrdinal("Pallet")))
                                row.Pallet = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pallet")), typeof(int));
                            else
                                row.Pallet = null;

                            if (fieldNames.Contains("Derivada") && !reader.IsDBNull(reader.GetOrdinal("Derivada")))
                                row.Derivada = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Derivada")), typeof(string));
                            else
                                row.Derivada = null;

                            if (fieldNames.Contains("EstadoUtp") && !reader.IsDBNull(reader.GetOrdinal("EstadoUtp")))
                                row.EstadoUtp = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoUtp")), typeof(string));

                            if (fieldNames.Contains("EstadoFuentePoder") && !reader.IsDBNull(reader.GetOrdinal("EstadoFuentePoder")))
                                row.EstadoFuentePoder = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoFuentePoder")), typeof(string));

                            if (fieldNames.Contains("EstadoControlRemoto") && !reader.IsDBNull(reader.GetOrdinal("EstadoControlRemoto")))
                                row.EstadoControlRemoto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoControlRemoto")), typeof(string));

                            if (fieldNames.Contains("EstadoHdmi") && !reader.IsDBNull(reader.GetOrdinal("EstadoHdmi")))
                                row.EstadoHdmi = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoHdmi")), typeof(string));

                            if (fieldNames.Contains("EstadoRca") && !reader.IsDBNull(reader.GetOrdinal("EstadoRca")))
                                row.EstadoRca = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoRca")), typeof(string));

                            if (fieldNames.Contains("Pintura") && !reader.IsDBNull(reader.GetOrdinal("Pintura")))
                                row.Pintura = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pintura")), typeof(bool));

                            if (fieldNames.Contains("ControlCalidad") && !reader.IsDBNull(reader.GetOrdinal("ControlCalidad")))
                                row.ControlCalidad = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ControlCalidad")), typeof(bool));

                            if (fieldNames.Contains("ProcesoFinalizado") && !reader.IsDBNull(reader.GetOrdinal("ProcesoFinalizado")))
                                row.ProcesoFinalizado = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ProcesoFinalizado")), typeof(bool));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SPSeguimientoDespachoEntityResult>> SPSeguimientoDespachoEntityAsync (string esn)
        {

            List<SPSeguimientoDespachoEntityResult> result = new List<SPSeguimientoDespachoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_SeguimientoDespacho";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPSeguimientoDespachoEntityResult row = new SPSeguimientoDespachoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal("Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Guia") && !reader.IsDBNull(reader.GetOrdinal("Guia")))
                                row.Guia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Guia")), typeof(string));
                            else
                                row.Guia = null;

                            if (fieldNames.Contains("EstadoDespacho") && !reader.IsDBNull(reader.GetOrdinal("EstadoDespacho")))
                                row.EstadoDespacho = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoDespacho")), typeof(string));
                            else
                                row.EstadoDespacho = null;

                            if (fieldNames.Contains("Caja") && !reader.IsDBNull(reader.GetOrdinal("Caja")))
                                row.Caja = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Caja")), typeof(int));
                            else
                                row.Caja = null;

                            if (fieldNames.Contains("Pallet") && !reader.IsDBNull(reader.GetOrdinal("Pallet")))
                                row.Pallet = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pallet")), typeof(int));
                            else
                                row.Pallet = null;

                            if (fieldNames.Contains("Derivada") && !reader.IsDBNull(reader.GetOrdinal("Derivada")))
                                row.Derivada = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Derivada")), typeof(string));
                            else
                                row.Derivada = null;

                            if (fieldNames.Contains("EstadoUtp") && !reader.IsDBNull(reader.GetOrdinal("EstadoUtp")))
                                row.EstadoUtp = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoUtp")), typeof(string));

                            if (fieldNames.Contains("EstadoFuentePoder") && !reader.IsDBNull(reader.GetOrdinal("EstadoFuentePoder")))
                                row.EstadoFuentePoder = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoFuentePoder")), typeof(string));

                            if (fieldNames.Contains("EstadoControlRemoto") && !reader.IsDBNull(reader.GetOrdinal("EstadoControlRemoto")))
                                row.EstadoControlRemoto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoControlRemoto")), typeof(string));

                            if (fieldNames.Contains("EstadoHdmi") && !reader.IsDBNull(reader.GetOrdinal("EstadoHdmi")))
                                row.EstadoHdmi = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoHdmi")), typeof(string));

                            if (fieldNames.Contains("EstadoRca") && !reader.IsDBNull(reader.GetOrdinal("EstadoRca")))
                                row.EstadoRca = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EstadoRca")), typeof(string));

                            if (fieldNames.Contains("Pintura") && !reader.IsDBNull(reader.GetOrdinal("Pintura")))
                                row.Pintura = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pintura")), typeof(bool));

                            if (fieldNames.Contains("ControlCalidad") && !reader.IsDBNull(reader.GetOrdinal("ControlCalidad")))
                                row.ControlCalidad = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ControlCalidad")), typeof(bool));

                            if (fieldNames.Contains("ProcesoFinalizado") && !reader.IsDBNull(reader.GetOrdinal("ProcesoFinalizado")))
                                row.ProcesoFinalizado = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ProcesoFinalizado")), typeof(bool));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SPSeguimientoEquipoEntityResult> SPSeguimientoEquipoEntity (string esn)
        {

            List<SPSeguimientoEquipoEntityResult> result = new List<SPSeguimientoEquipoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_SeguimientoEquipo";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPSeguimientoEquipoEntityResult row = new SPSeguimientoEquipoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("FechaRecepcion") && !reader.IsDBNull(reader.GetOrdinal("FechaRecepcion")))
                                row.FechaRecepcion = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FechaRecepcion")), typeof(System.DateTime));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Marca") && !reader.IsDBNull(reader.GetOrdinal("Marca")))
                                row.Marca = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Marca")), typeof(string));

                            if (fieldNames.Contains("Modelo") && !reader.IsDBNull(reader.GetOrdinal("Modelo")))
                                row.Modelo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Modelo")), typeof(string));

                            if (fieldNames.Contains("Color") && !reader.IsDBNull(reader.GetOrdinal("Color")))
                                row.Color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Color")), typeof(string));

                            if (fieldNames.Contains("Tecnologia") && !reader.IsDBNull(reader.GetOrdinal("Tecnologia")))
                                row.Tecnologia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tecnologia")), typeof(string));

                            if (fieldNames.Contains("Configuracion") && !reader.IsDBNull(reader.GetOrdinal("Configuracion")))
                                row.Configuracion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Configuracion")), typeof(string));

                            if (fieldNames.Contains("DetalleConfiguracion") && !reader.IsDBNull(reader.GetOrdinal("DetalleConfiguracion")))
                                row.DetalleConfiguracion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DetalleConfiguracion")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SPSeguimientoEquipoEntityResult>> SPSeguimientoEquipoEntityAsync (string esn)
        {

            List<SPSeguimientoEquipoEntityResult> result = new List<SPSeguimientoEquipoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_SeguimientoEquipo";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPSeguimientoEquipoEntityResult row = new SPSeguimientoEquipoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("FechaRecepcion") && !reader.IsDBNull(reader.GetOrdinal("FechaRecepcion")))
                                row.FechaRecepcion = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FechaRecepcion")), typeof(System.DateTime));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Marca") && !reader.IsDBNull(reader.GetOrdinal("Marca")))
                                row.Marca = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Marca")), typeof(string));

                            if (fieldNames.Contains("Modelo") && !reader.IsDBNull(reader.GetOrdinal("Modelo")))
                                row.Modelo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Modelo")), typeof(string));

                            if (fieldNames.Contains("Color") && !reader.IsDBNull(reader.GetOrdinal("Color")))
                                row.Color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Color")), typeof(string));

                            if (fieldNames.Contains("Tecnologia") && !reader.IsDBNull(reader.GetOrdinal("Tecnologia")))
                                row.Tecnologia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tecnologia")), typeof(string));

                            if (fieldNames.Contains("Configuracion") && !reader.IsDBNull(reader.GetOrdinal("Configuracion")))
                                row.Configuracion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Configuracion")), typeof(string));

                            if (fieldNames.Contains("DetalleConfiguracion") && !reader.IsDBNull(reader.GetOrdinal("DetalleConfiguracion")))
                                row.DetalleConfiguracion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DetalleConfiguracion")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SPInformacionEquipoEntityResult> SPInformacionEquipoEntity (string esn)
        {

            List<SPInformacionEquipoEntityResult> result = new List<SPInformacionEquipoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_InformacionEquipo";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPInformacionEquipoEntityResult row = new SPInformacionEquipoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Marca") && !reader.IsDBNull(reader.GetOrdinal("Marca")))
                                row.Marca = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Marca")), typeof(string));

                            if (fieldNames.Contains("Modelo") && !reader.IsDBNull(reader.GetOrdinal("Modelo")))
                                row.Modelo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Modelo")), typeof(string));

                            if (fieldNames.Contains("Color") && !reader.IsDBNull(reader.GetOrdinal("Color")))
                                row.Color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Color")), typeof(string));
                            else
                                row.Color = null;

                            if (fieldNames.Contains("TecnologiaId") && !reader.IsDBNull(reader.GetOrdinal("TecnologiaId")))
                                row.TecnologiaId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TecnologiaId")), typeof(int));
                            else
                                row.TecnologiaId = null;

                            if (fieldNames.Contains("Tecnologia") && !reader.IsDBNull(reader.GetOrdinal("Tecnologia")))
                                row.Tecnologia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tecnologia")), typeof(string));
                            else
                                row.Tecnologia = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SPInformacionEquipoEntityResult>> SPInformacionEquipoEntityAsync (string esn)
        {

            List<SPInformacionEquipoEntityResult> result = new List<SPInformacionEquipoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_InformacionEquipo";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPInformacionEquipoEntityResult row = new SPInformacionEquipoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Marca") && !reader.IsDBNull(reader.GetOrdinal("Marca")))
                                row.Marca = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Marca")), typeof(string));

                            if (fieldNames.Contains("Modelo") && !reader.IsDBNull(reader.GetOrdinal("Modelo")))
                                row.Modelo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Modelo")), typeof(string));

                            if (fieldNames.Contains("Color") && !reader.IsDBNull(reader.GetOrdinal("Color")))
                                row.Color = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Color")), typeof(string));
                            else
                                row.Color = null;

                            if (fieldNames.Contains("TecnologiaId") && !reader.IsDBNull(reader.GetOrdinal("TecnologiaId")))
                                row.TecnologiaId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TecnologiaId")), typeof(int));
                            else
                                row.TecnologiaId = null;

                            if (fieldNames.Contains("Tecnologia") && !reader.IsDBNull(reader.GetOrdinal("Tecnologia")))
                                row.Tecnologia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tecnologia")), typeof(string));
                            else
                                row.Tecnologia = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<SPUltimoOperarioEtapaEntityResult> SPUltimoOperarioEtapaEntity (int? equipoId, int? etapaId)
        {

            List<SPUltimoOperarioEtapaEntityResult> result = new List<SPUltimoOperarioEtapaEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_UltimoOperarioEtapa";

                    DbParameter equipoIdParameter = cmd.CreateParameter();
                    equipoIdParameter.ParameterName = "equipoId";
                    equipoIdParameter.Direction = ParameterDirection.Input;
                    equipoIdParameter.DbType = DbType.Int32;
                    equipoIdParameter.Precision = 10;
                    equipoIdParameter.Scale = 0;
                    if (equipoId.HasValue)
                    {
                        equipoIdParameter.Value = equipoId.Value;
                    }
                    else
                    {
                        equipoIdParameter.Size = -1;
                        equipoIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(equipoIdParameter);

                    DbParameter etapaIdParameter = cmd.CreateParameter();
                    etapaIdParameter.ParameterName = "etapaId";
                    etapaIdParameter.Direction = ParameterDirection.Input;
                    etapaIdParameter.DbType = DbType.Int32;
                    etapaIdParameter.Precision = 10;
                    etapaIdParameter.Scale = 0;
                    if (etapaId.HasValue)
                    {
                        etapaIdParameter.Value = etapaId.Value;
                    }
                    else
                    {
                        etapaIdParameter.Size = -1;
                        etapaIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(etapaIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPUltimoOperarioEtapaEntityResult row = new SPUltimoOperarioEtapaEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Nombre") && !reader.IsDBNull(reader.GetOrdinal("Nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Nombre")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SPUltimoOperarioEtapaEntityResult>> SPUltimoOperarioEtapaEntityAsync (int? equipoId, int? etapaId)
        {

            List<SPUltimoOperarioEtapaEntityResult> result = new List<SPUltimoOperarioEtapaEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_UltimoOperarioEtapa";

                    DbParameter equipoIdParameter = cmd.CreateParameter();
                    equipoIdParameter.ParameterName = "equipoId";
                    equipoIdParameter.Direction = ParameterDirection.Input;
                    equipoIdParameter.DbType = DbType.Int32;
                    equipoIdParameter.Precision = 10;
                    equipoIdParameter.Scale = 0;
                    if (equipoId.HasValue)
                    {
                        equipoIdParameter.Value = equipoId.Value;
                    }
                    else
                    {
                        equipoIdParameter.Size = -1;
                        equipoIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(equipoIdParameter);

                    DbParameter etapaIdParameter = cmd.CreateParameter();
                    etapaIdParameter.ParameterName = "etapaId";
                    etapaIdParameter.Direction = ParameterDirection.Input;
                    etapaIdParameter.DbType = DbType.Int32;
                    etapaIdParameter.Precision = 10;
                    etapaIdParameter.Scale = 0;
                    if (etapaId.HasValue)
                    {
                        etapaIdParameter.Value = etapaId.Value;
                    }
                    else
                    {
                        etapaIdParameter.Size = -1;
                        etapaIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(etapaIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPUltimoOperarioEtapaEntityResult row = new SPUltimoOperarioEtapaEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Nombre") && !reader.IsDBNull(reader.GetOrdinal("Nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Nombre")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void SPBulkInsertMovimientoEquipoEntity (int? etapaOrigenId, int? etapaDestinoId, DateTime? fechaCreacion, string usuarioCreacion)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_BulkInsertMovimientoEquipo";

                    DbParameter etapaOrigenIdParameter = cmd.CreateParameter();
                    etapaOrigenIdParameter.ParameterName = "etapaOrigenId";
                    etapaOrigenIdParameter.Direction = ParameterDirection.Input;
                    etapaOrigenIdParameter.DbType = DbType.Int32;
                    etapaOrigenIdParameter.Precision = 10;
                    etapaOrigenIdParameter.Scale = 0;
                    if (etapaOrigenId.HasValue)
                    {
                        etapaOrigenIdParameter.Value = etapaOrigenId.Value;
                    }
                    else
                    {
                        etapaOrigenIdParameter.Size = -1;
                        etapaOrigenIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(etapaOrigenIdParameter);

                    DbParameter etapaDestinoIdParameter = cmd.CreateParameter();
                    etapaDestinoIdParameter.ParameterName = "etapaDestinoId";
                    etapaDestinoIdParameter.Direction = ParameterDirection.Input;
                    etapaDestinoIdParameter.DbType = DbType.Int32;
                    etapaDestinoIdParameter.Precision = 10;
                    etapaDestinoIdParameter.Scale = 0;
                    if (etapaDestinoId.HasValue)
                    {
                        etapaDestinoIdParameter.Value = etapaDestinoId.Value;
                    }
                    else
                    {
                        etapaDestinoIdParameter.Size = -1;
                        etapaDestinoIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(etapaDestinoIdParameter);

                    DbParameter fechaCreacionParameter = cmd.CreateParameter();
                    fechaCreacionParameter.ParameterName = "fechaCreacion";
                    fechaCreacionParameter.Direction = ParameterDirection.Input;
                    fechaCreacionParameter.DbType = DbType.DateTime;
                    if (fechaCreacion.HasValue)
                    {
                        fechaCreacionParameter.Value = fechaCreacion.Value;
                    }
                    else
                    {
                        fechaCreacionParameter.Size = -1;
                        fechaCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaCreacionParameter);

                    DbParameter usuarioCreacionParameter = cmd.CreateParameter();
                    usuarioCreacionParameter.ParameterName = "usuarioCreacion";
                    usuarioCreacionParameter.Direction = ParameterDirection.Input;
                    usuarioCreacionParameter.DbType = DbType.String;
                    usuarioCreacionParameter.Size = 256;
                    if (usuarioCreacion != null)
                    {
                        usuarioCreacionParameter.Value = usuarioCreacion;
                    }
                    else
                    {
                        usuarioCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(usuarioCreacionParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task SPBulkInsertMovimientoEquipoEntityAsync (int? etapaOrigenId, int? etapaDestinoId, DateTime? fechaCreacion, string usuarioCreacion)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_BulkInsertMovimientoEquipo";

                    DbParameter etapaOrigenIdParameter = cmd.CreateParameter();
                    etapaOrigenIdParameter.ParameterName = "etapaOrigenId";
                    etapaOrigenIdParameter.Direction = ParameterDirection.Input;
                    etapaOrigenIdParameter.DbType = DbType.Int32;
                    etapaOrigenIdParameter.Precision = 10;
                    etapaOrigenIdParameter.Scale = 0;
                    if (etapaOrigenId.HasValue)
                    {
                        etapaOrigenIdParameter.Value = etapaOrigenId.Value;
                    }
                    else
                    {
                        etapaOrigenIdParameter.Size = -1;
                        etapaOrigenIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(etapaOrigenIdParameter);

                    DbParameter etapaDestinoIdParameter = cmd.CreateParameter();
                    etapaDestinoIdParameter.ParameterName = "etapaDestinoId";
                    etapaDestinoIdParameter.Direction = ParameterDirection.Input;
                    etapaDestinoIdParameter.DbType = DbType.Int32;
                    etapaDestinoIdParameter.Precision = 10;
                    etapaDestinoIdParameter.Scale = 0;
                    if (etapaDestinoId.HasValue)
                    {
                        etapaDestinoIdParameter.Value = etapaDestinoId.Value;
                    }
                    else
                    {
                        etapaDestinoIdParameter.Size = -1;
                        etapaDestinoIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(etapaDestinoIdParameter);

                    DbParameter fechaCreacionParameter = cmd.CreateParameter();
                    fechaCreacionParameter.ParameterName = "fechaCreacion";
                    fechaCreacionParameter.Direction = ParameterDirection.Input;
                    fechaCreacionParameter.DbType = DbType.DateTime;
                    if (fechaCreacion.HasValue)
                    {
                        fechaCreacionParameter.Value = fechaCreacion.Value;
                    }
                    else
                    {
                        fechaCreacionParameter.Size = -1;
                        fechaCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaCreacionParameter);

                    DbParameter usuarioCreacionParameter = cmd.CreateParameter();
                    usuarioCreacionParameter.ParameterName = "usuarioCreacion";
                    usuarioCreacionParameter.Direction = ParameterDirection.Input;
                    usuarioCreacionParameter.DbType = DbType.String;
                    usuarioCreacionParameter.Size = 256;
                    if (usuarioCreacion != null)
                    {
                        usuarioCreacionParameter.Value = usuarioCreacion;
                    }
                    else
                    {
                        usuarioCreacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(usuarioCreacionParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<SPSeguimientoUltimoMovimientoEntityResult> SPSeguimientoUltimoMovimientoEntity (string esn)
        {

            List<SPSeguimientoUltimoMovimientoEntityResult> result = new List<SPSeguimientoUltimoMovimientoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_SeguimientoUltimoMovimiento";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPSeguimientoUltimoMovimientoEntityResult row = new SPSeguimientoUltimoMovimientoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal("Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Origen") && !reader.IsDBNull(reader.GetOrdinal("Origen")))
                                row.Origen = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Origen")), typeof(string));

                            if (fieldNames.Contains("Destino") && !reader.IsDBNull(reader.GetOrdinal("Destino")))
                                row.Destino = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destino")), typeof(string));

                            if (fieldNames.Contains("Operario") && !reader.IsDBNull(reader.GetOrdinal("Operario")))
                                row.Operario = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Operario")), typeof(string));

                            if (fieldNames.Contains("OperarioDevolucion") && !reader.IsDBNull(reader.GetOrdinal("OperarioDevolucion")))
                                row.OperarioDevolucion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OperarioDevolucion")), typeof(string));
                            else
                                row.OperarioDevolucion = null;

                            if (fieldNames.Contains("Observacion") && !reader.IsDBNull(reader.GetOrdinal("Observacion")))
                                row.Observacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Observacion")), typeof(string));
                            else
                                row.Observacion = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<SPSeguimientoUltimoMovimientoEntityResult>> SPSeguimientoUltimoMovimientoEntityAsync (string esn)
        {

            List<SPSeguimientoUltimoMovimientoEntityResult> result = new List<SPSeguimientoUltimoMovimientoEntityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.SP_SeguimientoUltimoMovimiento";

                    DbParameter esnParameter = cmd.CreateParameter();
                    esnParameter.ParameterName = "esn";
                    esnParameter.Direction = ParameterDirection.Input;
                    esnParameter.DbType = DbType.String;
                    esnParameter.Size = 50;
                    if (esn != null)
                    {
                        esnParameter.Value = esn;
                    }
                    else
                    {
                        esnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(esnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            SPSeguimientoUltimoMovimientoEntityResult row = new SPSeguimientoUltimoMovimientoEntityResult();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal("Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("Esn") && !reader.IsDBNull(reader.GetOrdinal("Esn")))
                                row.Esn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Esn")), typeof(string));

                            if (fieldNames.Contains("Origen") && !reader.IsDBNull(reader.GetOrdinal("Origen")))
                                row.Origen = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Origen")), typeof(string));

                            if (fieldNames.Contains("Destino") && !reader.IsDBNull(reader.GetOrdinal("Destino")))
                                row.Destino = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destino")), typeof(string));

                            if (fieldNames.Contains("Operario") && !reader.IsDBNull(reader.GetOrdinal("Operario")))
                                row.Operario = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Operario")), typeof(string));

                            if (fieldNames.Contains("OperarioDevolucion") && !reader.IsDBNull(reader.GetOrdinal("OperarioDevolucion")))
                                row.OperarioDevolucion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OperarioDevolucion")), typeof(string));
                            else
                                row.OperarioDevolucion = null;

                            if (fieldNames.Contains("Observacion") && !reader.IsDBNull(reader.GetOrdinal("Observacion")))
                                row.Observacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Observacion")), typeof(string));
                            else
                                row.Observacion = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.IdentityRoleEntityMapping(modelBuilder);
            this.CustomizeIdentityRoleEntityMapping(modelBuilder);

            this.IdentityRoleClaimEntityMapping(modelBuilder);
            this.CustomizeIdentityRoleClaimEntityMapping(modelBuilder);

            this.IdentityUserEntityMapping(modelBuilder);
            this.CustomizeIdentityUserEntityMapping(modelBuilder);

            this.IdentityUserAccessLogEntityMapping(modelBuilder);
            this.CustomizeIdentityUserAccessLogEntityMapping(modelBuilder);

            this.IdentityUserClaimEntityMapping(modelBuilder);
            this.CustomizeIdentityUserClaimEntityMapping(modelBuilder);

            this.IdentityUserExceptionLogEntityMapping(modelBuilder);
            this.CustomizeIdentityUserExceptionLogEntityMapping(modelBuilder);

            this.IdentityUserLoginEntityMapping(modelBuilder);
            this.CustomizeIdentityUserLoginEntityMapping(modelBuilder);

            this.IdentityUserOperationLogEntityMapping(modelBuilder);
            this.CustomizeIdentityUserOperationLogEntityMapping(modelBuilder);

            this.IdentityUserRoleEntityMapping(modelBuilder);
            this.CustomizeIdentityUserRoleEntityMapping(modelBuilder);

            this.IdentityUserTokenEntityMapping(modelBuilder);
            this.CustomizeIdentityUserTokenEntityMapping(modelBuilder);

            this.EFMigrationsHistoryEntityMapping(modelBuilder);
            this.CustomizeEFMigrationsHistoryEntityMapping(modelBuilder);

            this.EquipoColorEntityMapping(modelBuilder);
            this.CustomizeEquipoColorEntityMapping(modelBuilder);

            this.EquipoMarcaEntityMapping(modelBuilder);
            this.CustomizeEquipoMarcaEntityMapping(modelBuilder);

            this.EquipoModeloEntityMapping(modelBuilder);
            this.CustomizeEquipoModeloEntityMapping(modelBuilder);

            this.EquipoMovimientoEntityMapping(modelBuilder);
            this.CustomizeEquipoMovimientoEntityMapping(modelBuilder);

            this.EtapaEntityMapping(modelBuilder);
            this.CustomizeEtapaEntityMapping(modelBuilder);

            this.ComponenteEstadoEntityMapping(modelBuilder);
            this.CustomizeComponenteEstadoEntityMapping(modelBuilder);

            this.DespachoEstadoEntityMapping(modelBuilder);
            this.CustomizeDespachoEstadoEntityMapping(modelBuilder);

            this.EtapaEstadoEntityMapping(modelBuilder);
            this.CustomizeEtapaEstadoEntityMapping(modelBuilder);

            this.PronosticoEntityMapping(modelBuilder);
            this.CustomizePronosticoEntityMapping(modelBuilder);

            this.ZonaEntityMapping(modelBuilder);
            this.CustomizeZonaEntityMapping(modelBuilder);

            this.EquipoTecnologiaEntityMapping(modelBuilder);
            this.CustomizeEquipoTecnologiaEntityMapping(modelBuilder);

            this.EquipoConfiguracionEntityMapping(modelBuilder);
            this.CustomizeEquipoConfiguracionEntityMapping(modelBuilder);

            this.EquipoEntityMapping(modelBuilder);
            this.CustomizeEquipoEntityMapping(modelBuilder);

            this.DespachoDetalleEntityMapping(modelBuilder);
            this.CustomizeDespachoDetalleEntityMapping(modelBuilder);

            this.DespachoEncabezadoEntityMapping(modelBuilder);
            this.CustomizeDespachoEncabezadoEntityMapping(modelBuilder);

            this.EquipoScrapEntityMapping(modelBuilder);
            this.CustomizeEquipoScrapEntityMapping(modelBuilder);

            this.VWMovimientoEquipoEntityMapping(modelBuilder);
            this.CustomizeVWMovimientoEquipoEntityMapping(modelBuilder);

            this.OperarioEntityMapping(modelBuilder);
            this.CustomizeOperarioEntityMapping(modelBuilder);

            this.TempDespachoCsvEntityMapping(modelBuilder);
            this.CustomizeTempDespachoCsvEntityMapping(modelBuilder);

            this.ApiUserEntityMapping(modelBuilder);
            this.CustomizeApiUserEntityMapping(modelBuilder);

            this.EtapaSecuenciaEntityMapping(modelBuilder);
            this.CustomizeEtapaSecuenciaEntityMapping(modelBuilder);

            this.TempEquipoMovimientoCsvEntityMapping(modelBuilder);
            this.CustomizeTempEquipoMovimientoCsvEntityMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region IdentityRoleEntity Mapping

        private void IdentityRoleEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityRoleEntity>().ToTable(@"IdentityRole", @"dbo");
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.AvailableAsAdmin).HasColumnName(@"AvailableAsAdmin").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.AvailableAsSuperAdmin).HasColumnName(@"AvailableAsSuperAdmin").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.NormalizedName).HasColumnName(@"NormalizedName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleEntity>().Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleEntity>().HasKey(@"Id");
            modelBuilder.Entity<IdentityRoleEntity>().HasIndex(@"NormalizedName").IsUnique(true);
        }

        partial void CustomizeIdentityRoleEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityRoleClaimEntity Mapping

        private void IdentityRoleClaimEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityRoleClaimEntity>().ToTable(@"IdentityRoleClaim", @"dbo");
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleClaimEntity>().Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityRoleClaimEntity>().HasKey(@"Id");
        }

        partial void CustomizeIdentityRoleClaimEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserEntity Mapping

        private void IdentityUserEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserEntity>().ToTable(@"IdentityUser", @"dbo");
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.NormalizedFullName).HasColumnName(@"NormalizedFullName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.Active).HasColumnName(@"Active").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.NormalizedUserName).HasColumnName(@"NormalizedUserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.NormalizedEmail).HasColumnName(@"NormalizedEmail").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.LockoutEnd).HasColumnName(@"LockoutEnd").HasColumnType(@"datetimeoffset").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserEntity>().Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<IdentityUserEntity>().HasKey(@"Id");
            modelBuilder.Entity<IdentityUserEntity>().HasIndex(@"NormalizedUserName").IsUnique(true);
        }

        partial void CustomizeIdentityUserEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserAccessLogEntity Mapping

        private void IdentityUserAccessLogEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserAccessLogEntity>().ToTable(@"IdentityUserAccessLog", @"dbo");
            modelBuilder.Entity<IdentityUserAccessLogEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(19, 0);
            modelBuilder.Entity<IdentityUserAccessLogEntity>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserAccessLogEntity>().Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<IdentityUserAccessLogEntity>().Property(x => x.AccessAt).HasColumnName(@"AccessAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserAccessLogEntity>().Property(x => x.SuccessfulLogin).HasColumnName(@"SuccessfulLogin").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserAccessLogEntity>().Property(x => x.Detail).HasColumnName(@"Detail").HasColumnType(@"varchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<IdentityUserAccessLogEntity>().HasKey(@"Id");
        }

        partial void CustomizeIdentityUserAccessLogEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserClaimEntity Mapping

        private void IdentityUserClaimEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserClaimEntity>().ToTable(@"IdentityUserClaim", @"dbo");
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserClaimEntity>().Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserClaimEntity>().HasKey(@"Id");
        }

        partial void CustomizeIdentityUserClaimEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserExceptionLogEntity Mapping

        private void IdentityUserExceptionLogEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().ToTable(@"IdentityUserExceptionLog", @"dbo");
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().Property(x => x.Message).HasColumnName(@"Message").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().Property(x => x.Type).HasColumnName(@"Type").HasColumnType(@"varchar(200)").IsRequired().ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().Property(x => x.Source).HasColumnName(@"Source").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().Property(x => x.Url).HasColumnName(@"Url").HasColumnType(@"varchar(2048)").IsRequired().ValueGeneratedNever().HasMaxLength(2048);
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserExceptionLogEntity>().HasKey(@"Id");
        }

        partial void CustomizeIdentityUserExceptionLogEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserLoginEntity Mapping

        private void IdentityUserLoginEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserLoginEntity>().ToTable(@"IdentityUserLogin", @"dbo");
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.ProviderKey).HasColumnName(@"ProviderKey").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.ProviderDisplayName).HasColumnName(@"ProviderDisplayName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserLoginEntity>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserLoginEntity>().HasKey(@"LoginProvider", @"ProviderKey");
        }

        partial void CustomizeIdentityUserLoginEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserOperationLogEntity Mapping

        private void IdentityUserOperationLogEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserOperationLogEntity>().ToTable(@"IdentityUserOperationLog", @"dbo");
            modelBuilder.Entity<IdentityUserOperationLogEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<IdentityUserOperationLogEntity>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserOperationLogEntity>().Property(x => x.Detail).HasColumnName(@"Detail").HasColumnType(@"varchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserOperationLogEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserOperationLogEntity>().HasKey(@"Id");
        }

        partial void CustomizeIdentityUserOperationLogEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserRoleEntity Mapping

        private void IdentityUserRoleEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserRoleEntity>().ToTable(@"IdentityUserRole", @"dbo");
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserRoleEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserRoleEntity>().HasKey(@"UserId", @"RoleId");
        }

        partial void CustomizeIdentityUserRoleEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region IdentityUserTokenEntity Mapping

        private void IdentityUserTokenEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityUserTokenEntity>().ToTable(@"IdentityUserToken", @"dbo");
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<IdentityUserTokenEntity>().Property(x => x.Value).HasColumnName(@"Value").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<IdentityUserTokenEntity>().HasKey(@"UserId", @"LoginProvider", @"Name");
        }

        partial void CustomizeIdentityUserTokenEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EFMigrationsHistoryEntity Mapping

        private void EFMigrationsHistoryEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EFMigrationsHistoryEntity>().ToTable(@"__EFMigrationsHistory", @"dbo");
            modelBuilder.Entity<EFMigrationsHistoryEntity>().Property(x => x.MigrationId).HasColumnName(@"MigrationId").HasColumnType(@"nvarchar(150)").IsRequired().ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<EFMigrationsHistoryEntity>().Property(x => x.ProductVersion).HasColumnName(@"ProductVersion").HasColumnType(@"nvarchar(32)").IsRequired().ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<EFMigrationsHistoryEntity>().HasKey(@"MigrationId");
        }

        partial void CustomizeEFMigrationsHistoryEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoColorEntity Mapping

        private void EquipoColorEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoColorEntity>().ToTable(@"EquipoColor", @"dbo");
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoColorEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EquipoColorEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoColorEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoMarcaEntity Mapping

        private void EquipoMarcaEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoMarcaEntity>().ToTable(@"EquipoMarca", @"dbo");
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoMarcaEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EquipoMarcaEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoMarcaEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoModeloEntity Mapping

        private void EquipoModeloEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoModeloEntity>().ToTable(@"EquipoModelo", @"dbo");
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.MarcaId).HasColumnName(@"MarcaId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.TecnologiaId).HasColumnName(@"TecnologiaId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoModeloEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EquipoModeloEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoModeloEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoMovimientoEntity Mapping

        private void EquipoMovimientoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoMovimientoEntity>().ToTable(@"EquipoMovimiento", @"dbo");
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.EquipoId).HasColumnName(@"EquipoId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.EtapaOrigenId).HasColumnName(@"EtapaOrigenId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.EtapaDestinoId).HasColumnName(@"EtapaDestinoId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.OperarioId).HasColumnName(@"OperarioId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.OperarioDevolucionId).HasColumnName(@"OperarioDevolucionId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.Observacion).HasColumnName(@"Observacion").HasColumnType(@"varchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoMovimientoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EquipoMovimientoEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoMovimientoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EtapaEntity Mapping

        private void EtapaEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EtapaEntity>().ToTable(@"Etapa", @"dbo");
            modelBuilder.Entity<EtapaEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EtapaEntity>().Property(x => x.Posicion).HasColumnName(@"Posicion").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaEntity>().Property(x => x.ZonaId).HasColumnName(@"ZonaId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EtapaEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EtapaEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EtapaEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EtapaEntity>().HasKey(@"Id");
        }

        partial void CustomizeEtapaEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region ComponenteEstadoEntity Mapping

        private void ComponenteEstadoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ComponenteEstadoEntity>().ToTable(@"ComponenteEstado", @"dbo");
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.Posicion).HasColumnName(@"Posicion").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ComponenteEstadoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ComponenteEstadoEntity>().HasKey(@"Id");
        }

        partial void CustomizeComponenteEstadoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region DespachoEstadoEntity Mapping

        private void DespachoEstadoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DespachoEstadoEntity>().ToTable(@"DespachoEstado", @"dbo");
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.Posicion).HasColumnName(@"Posicion").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoEstadoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<DespachoEstadoEntity>().HasKey(@"Id");
        }

        partial void CustomizeDespachoEstadoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EtapaEstadoEntity Mapping

        private void EtapaEstadoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EtapaEstadoEntity>().ToTable(@"EtapaEstado", @"dbo");
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.Posicion).HasColumnName(@"Posicion").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaEstadoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EtapaEstadoEntity>().HasKey(@"Id");
        }

        partial void CustomizeEtapaEstadoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region PronosticoEntity Mapping

        private void PronosticoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PronosticoEntity>().ToTable(@"Pronostico", @"dbo");
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(3, 0);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.Ano).HasColumnName(@"Ano").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever().HasPrecision(5, 0);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.TecnologiaId).HasColumnName(@"TecnologiaId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.Estimacion).HasColumnName(@"Estimacion").HasColumnType(@"decimal(12,4)").IsRequired().ValueGeneratedNever().HasPrecision(12, 4);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<PronosticoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<PronosticoEntity>().HasKey(@"Id");
        }

        partial void CustomizePronosticoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region ZonaEntity Mapping

        private void ZonaEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ZonaEntity>().ToTable(@"Zona", @"dbo");
            modelBuilder.Entity<ZonaEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<ZonaEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ZonaEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ZonaEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ZonaEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ZonaEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ZonaEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ZonaEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ZonaEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ZonaEntity>().HasKey(@"Id");
        }

        partial void CustomizeZonaEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoTecnologiaEntity Mapping

        private void EquipoTecnologiaEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoTecnologiaEntity>().ToTable(@"EquipoTecnologia", @"dbo");
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoTecnologiaEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EquipoTecnologiaEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoTecnologiaEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoConfiguracionEntity Mapping

        private void EquipoConfiguracionEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoConfiguracionEntity>().ToTable(@"EquipoConfiguracion", @"dbo");
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.Detalle).HasColumnName(@"Detalle").HasColumnType(@"varchar(200)").IsRequired().ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.TecnologiaId).HasColumnName(@"TecnologiaId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoConfiguracionEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<EquipoConfiguracionEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoConfiguracionEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoEntity Mapping

        private void EquipoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoEntity>().ToTable(@"Equipo", @"dbo");
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.HeaderId).HasColumnName(@"HeaderId").HasColumnType(@"numeric(18)").IsRequired().ValueGeneratedNever().HasPrecision(18, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Esn).HasColumnName(@"Esn").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.NumeroReferencia).HasColumnName(@"NumeroReferencia").HasColumnType(@"varchar(20)").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.ModeloId).HasColumnName(@"ModeloId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.ColorId).HasColumnName(@"ColorId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Tipo).HasColumnName(@"Tipo").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Subtipo).HasColumnName(@"Subtipo").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Categoria).HasColumnName(@"Categoria").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Subcategoria).HasColumnName(@"Subcategoria").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Subestado).HasColumnName(@"Subestado").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.FuentePoderEstadoId).HasColumnName(@"FuentePoderEstadoId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.UtpEstadoId).HasColumnName(@"UtpEstadoId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.ControlRemotoEstadoId).HasColumnName(@"ControlRemotoEstadoId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.HdmiEstadoId).HasColumnName(@"HdmiEstadoId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.RcaEstadoId).HasColumnName(@"RcaEstadoId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Pintura).HasColumnName(@"Pintura").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Derivada).HasColumnName(@"Derivada").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.ProcesoFinalizado).HasColumnName(@"ProcesoFinalizado").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region DespachoDetalleEntity Mapping

        private void DespachoDetalleEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DespachoDetalleEntity>().ToTable(@"DespachoDetalle", @"dbo");
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.EquipoId).HasColumnName(@"EquipoId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.EncabezadoId).HasColumnName(@"EncabezadoId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.Caja).HasColumnName(@"Caja").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.Pallet).HasColumnName(@"Pallet").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoDetalleEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DespachoDetalleEntity>().HasKey(@"Id");
        }

        partial void CustomizeDespachoDetalleEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region DespachoEncabezadoEntity Mapping

        private void DespachoEncabezadoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DespachoEncabezadoEntity>().ToTable(@"DespachoEncabezado", @"dbo");
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.Guia).HasColumnName(@"Guia").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.EstadoId).HasColumnName(@"EstadoId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<DespachoEncabezadoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DespachoEncabezadoEntity>().HasKey(@"Id");
        }

        partial void CustomizeDespachoEncabezadoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EquipoScrapEntity Mapping

        private void EquipoScrapEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EquipoScrapEntity>().ToTable(@"EquipoScrap", @"dbo");
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.EquipoId).HasColumnName(@"EquipoId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.Origen).HasColumnName(@"Origen").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.Detalle).HasColumnName(@"Detalle").HasColumnType(@"varchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EquipoScrapEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EquipoScrapEntity>().HasKey(@"Id");
        }

        partial void CustomizeEquipoScrapEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region VWMovimientoEquipoEntity Mapping

        private void VWMovimientoEquipoEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VWMovimientoEquipoEntity>().HasNoKey();
            modelBuilder.Entity<VWMovimientoEquipoEntity>().ToView(@"VW_MovimientoEquipo", @"dbo");
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Esn).HasColumnName(@"Esn").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Marca).HasColumnName(@"Marca").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Modelo).HasColumnName(@"Modelo").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Color).HasColumnName(@"Color").HasColumnType(@"varchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.OrigenId).HasColumnName(@"OrigenId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Origen).HasColumnName(@"Origen").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.DestinoId).HasColumnName(@"DestinoId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Destino).HasColumnName(@"Destino").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Operario).HasColumnName(@"Operario").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.OperarioDevolucion).HasColumnName(@"OperarioDevolucion").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Observacion).HasColumnName(@"Observacion").HasColumnType(@"varchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<VWMovimientoEquipoEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeVWMovimientoEquipoEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region OperarioEntity Mapping

        private void OperarioEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OperarioEntity>().ToTable(@"Operario", @"dbo");
            modelBuilder.Entity<OperarioEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<OperarioEntity>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<OperarioEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<OperarioEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<OperarioEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<OperarioEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<OperarioEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<OperarioEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<OperarioEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<OperarioEntity>().HasKey(@"Id");
        }

        partial void CustomizeOperarioEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region TempDespachoCsvEntity Mapping

        private void TempDespachoCsvEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TempDespachoCsvEntity>().ToTable(@"TempDespachoCsv", @"dbo");
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Esn).HasColumnName(@"Esn").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Guia).HasColumnName(@"Guia").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.EstadoDespacho).HasColumnName(@"EstadoDespacho").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Operario).HasColumnName(@"Operario").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Caja).HasColumnName(@"Caja").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Pallet).HasColumnName(@"Pallet").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.EstadoFuentePoder).HasColumnName(@"EstadoFuentePoder").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.EstadoUtp).HasColumnName(@"EstadoUtp").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.EstadoControlRemoto).HasColumnName(@"EstadoControlRemoto").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.EstadoHdmi).HasColumnName(@"EstadoHdmi").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.EstadoRca).HasColumnName(@"EstadoRca").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Pintura).HasColumnName(@"Pintura").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.Derivada).HasColumnName(@"Derivada").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.ProcesoFinalizado).HasColumnName(@"ProcesoFinalizado").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.EquipoId).HasColumnName(@"EquipoId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<TempDespachoCsvEntity>().Property(x => x.CargaExitosa).HasColumnName(@"CargaExitosa").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempDespachoCsvEntity>().HasKey(@"Id");
        }

        partial void CustomizeTempDespachoCsvEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region ApiUserEntity Mapping

        private void ApiUserEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApiUserEntity>().ToTable(@"ApiUser", @"dbo");
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.KeyHash).HasColumnName(@"KeyHash").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.Comments).HasColumnName(@"Comments").HasColumnType(@"varchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.ModifiedAt).HasColumnName(@"ModifiedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.DeactivatedAt).HasColumnName(@"DeactivatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.DeactivatedBy).HasColumnName(@"DeactivatedBy").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.DeactivatedReason).HasColumnName(@"DeactivatedReason").HasColumnType(@"varchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ApiUserEntity>().Property(x => x.Active).HasColumnName(@"Active").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ApiUserEntity>().HasKey(@"Id");
        }

        partial void CustomizeApiUserEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region EtapaSecuenciaEntity Mapping

        private void EtapaSecuenciaEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EtapaSecuenciaEntity>().ToTable(@"EtapaSecuencia", @"dbo");
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.EtapaId).HasColumnName(@"EtapaId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.EtapaAnteriorPosteriorId).HasColumnName(@"EtapaAnteriorPosteriorId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.EsEtapaAnterior).HasColumnName(@"EsEtapaAnterior").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.FechaModificacionRegistro).HasColumnName(@"FechaModificacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.UsuarioModificacionRegistro).HasColumnName(@"UsuarioModificacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.FechaEliminacionRegistro).HasColumnName(@"FechaEliminacionRegistro").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.UsuarioEliminacionRegistro).HasColumnName(@"UsuarioEliminacionRegistro").HasColumnType(@"varchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<EtapaSecuenciaEntity>().Property(x => x.Activo).HasColumnName(@"Activo").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EtapaSecuenciaEntity>().HasKey(@"Id");
        }

        partial void CustomizeEtapaSecuenciaEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region TempEquipoMovimientoCsvEntity Mapping

        private void TempEquipoMovimientoCsvEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().ToTable(@"TempEquipoMovimientoCsv", @"dbo");
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.Esn).HasColumnName(@"Esn").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.Operario).HasColumnName(@"Operario").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.OperarioDevolucion).HasColumnName(@"OperarioDevolucion").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.Observacion).HasColumnName(@"Observacion").HasColumnType(@"varchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.EquipoId).HasColumnName(@"EquipoId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.OperarioId).HasColumnName(@"OperarioId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.OperarioDevolucionId).HasColumnName(@"OperarioDevolucionId").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.FechaCreacionRegistro).HasColumnName(@"FechaCreacionRegistro").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.UsuarioCreacionRegistro).HasColumnName(@"UsuarioCreacionRegistro").HasColumnType(@"varchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().Property(x => x.CargaExitosa).HasColumnName(@"CargaExitosa").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TempEquipoMovimientoCsvEntity>().HasKey(@"Id");
        }

        partial void CustomizeTempEquipoMovimientoCsvEntityMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IdentityRoleEntity>().HasMany(x => x.IdentityRoleClaimEntities).WithOne(op => op.IdentityRoleEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(true);
            modelBuilder.Entity<IdentityRoleEntity>().HasMany(x => x.IdentityUserRoleEntities).WithOne(op => op.IdentityRoleEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(true);

            modelBuilder.Entity<IdentityRoleClaimEntity>().HasOne(x => x.IdentityRoleEntity).WithMany(op => op.IdentityRoleClaimEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(true);

            modelBuilder.Entity<IdentityUserEntity>().HasMany(x => x.IdentityUserAccessLogEntities).WithOne(op => op.IdentityUserEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<IdentityUserEntity>().HasMany(x => x.IdentityUserClaimEntities).WithOne(op => op.IdentityUserEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<IdentityUserEntity>().HasMany(x => x.IdentityUserExceptionLogEntities).WithOne(op => op.IdentityUserEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<IdentityUserEntity>().HasMany(x => x.IdentityUserLoginEntities).WithOne(op => op.IdentityUserEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<IdentityUserEntity>().HasMany(x => x.IdentityUserOperationLogEntities).WithOne(op => op.IdentityUserEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<IdentityUserEntity>().HasMany(x => x.IdentityUserRoleEntities).WithOne(op => op.IdentityUserEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<IdentityUserEntity>().HasMany(x => x.IdentityUserTokenEntities).WithOne(op => op.IdentityUserEntity).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<IdentityUserAccessLogEntity>().HasOne(x => x.IdentityUserEntity).WithMany(op => op.IdentityUserAccessLogEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<IdentityUserClaimEntity>().HasOne(x => x.IdentityUserEntity).WithMany(op => op.IdentityUserClaimEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<IdentityUserExceptionLogEntity>().HasOne(x => x.IdentityUserEntity).WithMany(op => op.IdentityUserExceptionLogEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<IdentityUserLoginEntity>().HasOne(x => x.IdentityUserEntity).WithMany(op => op.IdentityUserLoginEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<IdentityUserOperationLogEntity>().HasOne(x => x.IdentityUserEntity).WithMany(op => op.IdentityUserOperationLogEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<IdentityUserRoleEntity>().HasOne(x => x.IdentityRoleEntity).WithMany(op => op.IdentityUserRoleEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"RoleId").IsRequired(true);
            modelBuilder.Entity<IdentityUserRoleEntity>().HasOne(x => x.IdentityUserEntity).WithMany(op => op.IdentityUserRoleEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<IdentityUserTokenEntity>().HasOne(x => x.IdentityUserEntity).WithMany(op => op.IdentityUserTokenEntities).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<EquipoColorEntity>().HasMany(x => x.EquipoEntities).WithOne(op => op.EquipoColorEntity).HasForeignKey(@"ColorId").IsRequired(false);

            modelBuilder.Entity<EquipoMarcaEntity>().HasMany(x => x.EquipoModeloEntities).WithOne(op => op.EquipoMarcaEntity).HasForeignKey(@"MarcaId").IsRequired(true);

            modelBuilder.Entity<EquipoModeloEntity>().HasOne(x => x.EquipoMarcaEntity).WithMany(op => op.EquipoModeloEntities).HasForeignKey(@"MarcaId").IsRequired(true);
            modelBuilder.Entity<EquipoModeloEntity>().HasOne(x => x.EquipoTecnologiaEntity).WithMany(op => op.EquipoModeloEntities).HasForeignKey(@"TecnologiaId").IsRequired(false);
            modelBuilder.Entity<EquipoModeloEntity>().HasMany(x => x.EquipoEntities).WithOne(op => op.EquipoModeloEntity).HasForeignKey(@"ModeloId").IsRequired(false);

            modelBuilder.Entity<EquipoMovimientoEntity>().HasOne(x => x.EtapaEntity_EtapaOrigenId).WithMany(op => op.EquipoMovimientoEntities_EtapaOrigenId).HasForeignKey(@"EtapaOrigenId").IsRequired(true);
            modelBuilder.Entity<EquipoMovimientoEntity>().HasOne(x => x.EtapaEntity_EtapaDestinoId).WithMany(op => op.EquipoMovimientoEntities_EtapaDestinoId).HasForeignKey(@"EtapaDestinoId").IsRequired(true);
            modelBuilder.Entity<EquipoMovimientoEntity>().HasOne(x => x.EquipoEntity).WithMany(op => op.EquipoMovimientoEntities).HasForeignKey(@"EquipoId").IsRequired(true);
            modelBuilder.Entity<EquipoMovimientoEntity>().HasOne(x => x.OperarioEntity_OperarioId).WithMany(op => op.EquipoMovimientoEntities_OperarioId).HasForeignKey(@"OperarioId").IsRequired(true);
            modelBuilder.Entity<EquipoMovimientoEntity>().HasOne(x => x.OperarioEntity_OperarioDevolucionId).WithMany(op => op.EquipoMovimientoEntities_OperarioDevolucionId).HasForeignKey(@"OperarioDevolucionId").IsRequired(false);

            modelBuilder.Entity<EtapaEntity>().HasMany(x => x.EquipoMovimientoEntities_EtapaOrigenId).WithOne(op => op.EtapaEntity_EtapaOrigenId).HasForeignKey(@"EtapaOrigenId").IsRequired(true);
            modelBuilder.Entity<EtapaEntity>().HasMany(x => x.EquipoMovimientoEntities_EtapaDestinoId).WithOne(op => op.EtapaEntity_EtapaDestinoId).HasForeignKey(@"EtapaDestinoId").IsRequired(true);
            modelBuilder.Entity<EtapaEntity>().HasOne(x => x.ZonaEntity).WithMany(op => op.EtapaEntities).HasForeignKey(@"ZonaId").IsRequired(true);
            modelBuilder.Entity<EtapaEntity>().HasMany(x => x.EtapaSecuenciaEntities_EtapaId).WithOne(op => op.EtapaEntity_EtapaId).HasForeignKey(@"EtapaId").IsRequired(true);
            modelBuilder.Entity<EtapaEntity>().HasMany(x => x.EtapaSecuenciaEntities_EtapaAnteriorPosteriorId).WithOne(op => op.EtapaEntity_EtapaAnteriorPosteriorId).HasForeignKey(@"EtapaAnteriorPosteriorId").IsRequired(true);

            modelBuilder.Entity<ComponenteEstadoEntity>().HasMany(x => x.EquipoEntities_FuentePoderEstadoId).WithOne(op => op.ComponenteEstadoEntity_FuentePoderEstadoId).HasForeignKey(@"FuentePoderEstadoId").IsRequired(false);
            modelBuilder.Entity<ComponenteEstadoEntity>().HasMany(x => x.EquipoEntities_UtpEstadoId).WithOne(op => op.ComponenteEstadoEntity_UtpEstadoId).HasForeignKey(@"UtpEstadoId").IsRequired(false);
            modelBuilder.Entity<ComponenteEstadoEntity>().HasMany(x => x.EquipoEntities_ControlRemotoEstadoId).WithOne(op => op.ComponenteEstadoEntity_ControlRemotoEstadoId).HasForeignKey(@"ControlRemotoEstadoId").IsRequired(false);
            modelBuilder.Entity<ComponenteEstadoEntity>().HasMany(x => x.EquipoEntities_HdmiEstadoId).WithOne(op => op.ComponenteEstadoEntity_HdmiEstadoId).HasForeignKey(@"HdmiEstadoId").IsRequired(false);
            modelBuilder.Entity<ComponenteEstadoEntity>().HasMany(x => x.EquipoEntities_RcaEstadoId).WithOne(op => op.ComponenteEstadoEntity_RcaEstadoId).HasForeignKey(@"RcaEstadoId").IsRequired(false);

            modelBuilder.Entity<DespachoEstadoEntity>().HasMany(x => x.DespachoEncabezadoEntities).WithOne(op => op.DespachoEstadoEntity).HasForeignKey(@"EstadoId").IsRequired(true);

            modelBuilder.Entity<PronosticoEntity>().HasOne(x => x.EquipoTecnologiaEntity).WithMany(op => op.PronosticoEntities).HasForeignKey(@"TecnologiaId").IsRequired(true);

            modelBuilder.Entity<ZonaEntity>().HasMany(x => x.EtapaEntities).WithOne(op => op.ZonaEntity).HasForeignKey(@"ZonaId").IsRequired(true);

            modelBuilder.Entity<EquipoTecnologiaEntity>().HasMany(x => x.EquipoModeloEntities).WithOne(op => op.EquipoTecnologiaEntity).HasForeignKey(@"TecnologiaId").IsRequired(false);
            modelBuilder.Entity<EquipoTecnologiaEntity>().HasMany(x => x.EquipoConfiguracionEntities).WithOne(op => op.EquipoTecnologiaEntity).HasForeignKey(@"TecnologiaId").IsRequired(true);
            modelBuilder.Entity<EquipoTecnologiaEntity>().HasMany(x => x.PronosticoEntities).WithOne(op => op.EquipoTecnologiaEntity).HasForeignKey(@"TecnologiaId").IsRequired(true);

            modelBuilder.Entity<EquipoConfiguracionEntity>().HasOne(x => x.EquipoTecnologiaEntity).WithMany(op => op.EquipoConfiguracionEntities).HasForeignKey(@"TecnologiaId").IsRequired(true);

            modelBuilder.Entity<EquipoEntity>().HasOne(x => x.EquipoColorEntity).WithMany(op => op.EquipoEntities).HasForeignKey(@"ColorId").IsRequired(false);
            modelBuilder.Entity<EquipoEntity>().HasOne(x => x.EquipoModeloEntity).WithMany(op => op.EquipoEntities).HasForeignKey(@"ModeloId").IsRequired(false);
            modelBuilder.Entity<EquipoEntity>().HasMany(x => x.EquipoMovimientoEntities).WithOne(op => op.EquipoEntity).HasForeignKey(@"EquipoId").IsRequired(true);
            modelBuilder.Entity<EquipoEntity>().HasMany(x => x.DespachoDetalleEntities).WithOne(op => op.EquipoEntity).HasForeignKey(@"EquipoId").IsRequired(true);
            modelBuilder.Entity<EquipoEntity>().HasMany(x => x.EquipoScrapEntities).WithOne(op => op.EquipoEntity).HasForeignKey(@"EquipoId").IsRequired(true);
            modelBuilder.Entity<EquipoEntity>().HasOne(x => x.ComponenteEstadoEntity_FuentePoderEstadoId).WithMany(op => op.EquipoEntities_FuentePoderEstadoId).HasForeignKey(@"FuentePoderEstadoId").IsRequired(false);
            modelBuilder.Entity<EquipoEntity>().HasOne(x => x.ComponenteEstadoEntity_UtpEstadoId).WithMany(op => op.EquipoEntities_UtpEstadoId).HasForeignKey(@"UtpEstadoId").IsRequired(false);
            modelBuilder.Entity<EquipoEntity>().HasOne(x => x.ComponenteEstadoEntity_ControlRemotoEstadoId).WithMany(op => op.EquipoEntities_ControlRemotoEstadoId).HasForeignKey(@"ControlRemotoEstadoId").IsRequired(false);
            modelBuilder.Entity<EquipoEntity>().HasOne(x => x.ComponenteEstadoEntity_HdmiEstadoId).WithMany(op => op.EquipoEntities_HdmiEstadoId).HasForeignKey(@"HdmiEstadoId").IsRequired(false);
            modelBuilder.Entity<EquipoEntity>().HasOne(x => x.ComponenteEstadoEntity_RcaEstadoId).WithMany(op => op.EquipoEntities_RcaEstadoId).HasForeignKey(@"RcaEstadoId").IsRequired(false);

            modelBuilder.Entity<DespachoDetalleEntity>().HasOne(x => x.DespachoEncabezadoEntity).WithMany(op => op.DespachoDetalleEntities).HasForeignKey(@"EncabezadoId").IsRequired(true);
            modelBuilder.Entity<DespachoDetalleEntity>().HasOne(x => x.EquipoEntity).WithMany(op => op.DespachoDetalleEntities).HasForeignKey(@"EquipoId").IsRequired(true);

            modelBuilder.Entity<DespachoEncabezadoEntity>().HasMany(x => x.DespachoDetalleEntities).WithOne(op => op.DespachoEncabezadoEntity).HasForeignKey(@"EncabezadoId").IsRequired(true);
            modelBuilder.Entity<DespachoEncabezadoEntity>().HasOne(x => x.DespachoEstadoEntity).WithMany(op => op.DespachoEncabezadoEntities).HasForeignKey(@"EstadoId").IsRequired(true);

            modelBuilder.Entity<EquipoScrapEntity>().HasOne(x => x.EquipoEntity).WithMany(op => op.EquipoScrapEntities).HasForeignKey(@"EquipoId").IsRequired(true);

            modelBuilder.Entity<OperarioEntity>().HasMany(x => x.EquipoMovimientoEntities_OperarioId).WithOne(op => op.OperarioEntity_OperarioId).HasForeignKey(@"OperarioId").IsRequired(true);
            modelBuilder.Entity<OperarioEntity>().HasMany(x => x.EquipoMovimientoEntities_OperarioDevolucionId).WithOne(op => op.OperarioEntity_OperarioDevolucionId).HasForeignKey(@"OperarioDevolucionId").IsRequired(false);

            modelBuilder.Entity<EtapaSecuenciaEntity>().HasOne(x => x.EtapaEntity_EtapaId).WithMany(op => op.EtapaSecuenciaEntities_EtapaId).HasForeignKey(@"EtapaId").IsRequired(true);
            modelBuilder.Entity<EtapaSecuenciaEntity>().HasOne(x => x.EtapaEntity_EtapaAnteriorPosteriorId).WithMany(op => op.EtapaSecuenciaEntities_EtapaAnteriorPosteriorId).HasForeignKey(@"EtapaAnteriorPosteriorId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
