//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 26-10-2021 03:18:16 PM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using ReporteriaMovistar.Domain.Interfaces.Repositories;
using ReporteriaMovistar.Domain.Models.Entities;
using ReporteriaMovistar.Domain.Models.Pagination;
using ReporteriaMovistar.Domain.Models.Sorting;
using ReporteriaMovistar.Infrastructure.Data.Extensions;

namespace ReporteriaMovistar.Infrastructure.Data.Repositories
{
    public partial class EquipoMarcaEntityRepository
    {
	    public async Task<EquipoMarcaEntity> FindAsync(int id)
	    {
		    IQueryable<EquipoMarcaEntity> consultaFiltrada = this.objectSet.Where(e => e.Activo && e.Id == id);
		    return await consultaFiltrada.SingleOrDefaultAsync();
	    }

	    public async Task<IEnumerable<EquipoMarcaEntity>> GetAsync(string marca)
	    {
		    IQueryable<EquipoMarcaEntity> consultaFiltrada = string.IsNullOrWhiteSpace(marca) ? this.objectSet.Where(e => e.Activo) : this.objectSet.Where(e => e.Activo && EF.Functions.Like(e.Nombre, $"%{marca}%"));
		    return await consultaFiltrada.OrderBy(e => e.Id).ToListAsync();
	    }

		public async Task<PagedResult<EquipoMarcaEntity>> GetPaginadoAsync(bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
	    {
			IQueryable<EquipoMarcaEntity> consultaFiltrada = this.objectSet.Where(e => e.Activo == activeRecords);

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"marca" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Nombre),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
				"fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
				"usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
				"eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
				_ => consultaFiltrada.OrderBy(e => e.Id)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}
    }
}
