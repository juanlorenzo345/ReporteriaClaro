//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 10-11-2021 01:36:07 PM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using EFCore.BulkExtensions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaMovistar.Domain.Interfaces.Repositories;
using ReporteriaMovistar.Domain.Models.Entities;
using ReporteriaMovistar.Domain.Models.Pagination;
using ReporteriaMovistar.Domain.Models.Sorting;
using ReporteriaMovistar.Infrastructure.Data.Extensions;

namespace ReporteriaMovistar.Infrastructure.Data.Repositories
{
    public partial class DespachoDetalleEntityRepository
    {
	    public async Task<DespachoDetalleEntity> FindAsync(int id)
	    {
			IIncludableQueryable<DespachoDetalleEntity, EquipoMarcaEntity> consultaJoin = this.objectSet
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_FuentePoderEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_UtpEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_ControlRemotoEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_HdmiEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_RcaEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.EquipoColorEntity)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.EquipoModeloEntity)
				.ThenInclude(e => e.EquipoMarcaEntity);

			IQueryable<DespachoDetalleEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo && e.Id == id);

			return await consultaFiltrada.SingleOrDefaultAsync();
	    }

	    public async Task BatchUpdateDesactivarDetallePorEncabezadoAsync(int idEncabezado, DateTime fechaEliminacion, string usuarioEliminacion)
	    {
		    List<string> columnasAActualizar = new List<string>()
		    {
				nameof(DespachoDetalleEntity.FechaEliminacionRegistro),
				nameof(DespachoDetalleEntity.UsuarioEliminacionRegistro),
				nameof(DespachoDetalleEntity.Activo)
		    };

		    await this.objectSet.Where(e => e.EncabezadoId == idEncabezado).BatchUpdateAsync(new DespachoDetalleEntity() { FechaEliminacionRegistro = fechaEliminacion, UsuarioEliminacionRegistro = usuarioEliminacion,Activo = false }, columnasAActualizar);
	    }

	    public async Task<PagedResult<DespachoDetalleEntity>> GetPaginadoAsync(int idEncabezadoDespacho, bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
	    {
			IIncludableQueryable<DespachoDetalleEntity, EquipoMarcaEntity> consultaJoin = this.objectSet
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_FuentePoderEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_UtpEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_ControlRemotoEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_HdmiEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.ComponenteEstadoEntity_RcaEstadoId)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.EquipoColorEntity)
				.Include(e => e.EquipoEntity)
				.ThenInclude(e => e.EquipoModeloEntity)
				.ThenInclude(e => e.EquipoMarcaEntity);

			IQueryable<DespachoDetalleEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo == activeRecords && e.EncabezadoId == idEncabezadoDespacho);

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"esn" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.Esn),
				"marca" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.EquipoModeloEntity.EquipoMarcaEntity.Nombre),
				"modelo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.EquipoModeloEntity.Nombre),
				"color" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.EquipoColorEntity.Nombre),
				"pallet" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Pallet),
				"caja" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Caja),
				"derivada" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.Derivada),
				"pintura" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.Pintura),
				"proceso_finalizado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.ProcesoFinalizado),
				"fuente_poder" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.ComponenteEstadoEntity_FuentePoderEstadoId.Nombre),
				"utp" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.ComponenteEstadoEntity_UtpEstadoId.Nombre),
				"control_remoto" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.ComponenteEstadoEntity_ControlRemotoEstadoId.Nombre),
				"hdmi" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.ComponenteEstadoEntity_HdmiEstadoId.Nombre),
				"rca" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoEntity.ComponenteEstadoEntity_RcaEstadoId.Nombre),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
				"fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
				"usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
				"eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
				_ => consultaFiltrada.OrderBy(e => e.Id)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}
    }
}
