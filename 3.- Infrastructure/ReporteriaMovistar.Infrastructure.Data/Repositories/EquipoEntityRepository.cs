//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 08-11-2021 12:59:49 PM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaMovistar.Domain.Interfaces.Repositories;
using ReporteriaMovistar.Domain.Models.Entities;
using ReporteriaMovistar.Domain.Models.Pagination;
using ReporteriaMovistar.Domain.Models.Sorting;
using ReporteriaMovistar.Infrastructure.Data.Extensions;

namespace ReporteriaMovistar.Infrastructure.Data.Repositories
{
    public partial class EquipoEntityRepository
    {
	    public async Task<IEnumerable<EquipoEntity>> GetTop20Async(string esnBuscado)
	    {
			IIncludableQueryable<EquipoEntity, EquipoColorEntity> consultaJoin = this.objectSet
				.Include(e => e.EquipoModeloEntity)
				.ThenInclude(e => e.EquipoMarcaEntity)
				.Include(e => e.EquipoColorEntity);

			IQueryable<EquipoEntity> consultaFiltrada = string.IsNullOrWhiteSpace(esnBuscado) ? consultaJoin.Where(e => e.Activo && !e.ProcesoFinalizado) : consultaJoin.Where(e => e.Activo && !e.ProcesoFinalizado && EF.Functions.Like(e.Esn, $"%{esnBuscado}%"));

			return await consultaFiltrada.Take(20).ToListAsync();
	    }

	    public async Task<PagedResult<EquipoEntity>> GetPaginadoAsync(string esnBuscado, bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
	    {
		    IIncludableQueryable<EquipoEntity, EquipoColorEntity> consultaJoin = this.objectSet
			    .Include(e => e.EquipoModeloEntity)
			    .ThenInclude(e => e.EquipoMarcaEntity)
			    .Include(e => e.EquipoModeloEntity)
			    .ThenInclude(e => e.EquipoTecnologiaEntity)
			    .Include(e => e.EquipoColorEntity);

			IQueryable<EquipoEntity> consultaFiltrada = string.IsNullOrWhiteSpace(esnBuscado) ? consultaJoin.Where(e => e.Activo == activeRecords) : consultaJoin.Where(e => e.Activo && EF.Functions.Like(e.Esn, $"%{esnBuscado}%"));

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"fecha" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Fecha),
				"header_id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.HeaderId),
				"esn" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Esn),
				"numero_referencia" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.NumeroReferencia),
				"marca" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoModeloEntity.EquipoMarcaEntity.Nombre),
				"modelo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoModeloEntity.Nombre),
				"color" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoColorEntity.Nombre),
				"tecnologia" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoModeloEntity.EquipoTecnologiaEntity.Nombre),
				"tipo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Tipo),
				"subtipo" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Subtipo),
				"categoria" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Categoria),
				"subcategoria" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Subcategoria),
				"estado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Estado),
				"subestado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Subestado),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
				"fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
				"usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
				"eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
				_ => consultaFiltrada.OrderByDescending(e => e.Fecha)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}
    }
}
