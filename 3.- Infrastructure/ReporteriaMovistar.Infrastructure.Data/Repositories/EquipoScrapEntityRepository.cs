//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: jue. 11 nov. 2021 9:55:43
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ReporteriaMovistar.Domain.Interfaces.Repositories;
using ReporteriaMovistar.Domain.Models.Entities;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaMovistar.Infrastructure.Data.Extensions;
using ReporteriaMovistar.Domain.Models.Pagination;
using ReporteriaMovistar.Domain.Models.Sorting;

namespace ReporteriaMovistar.Infrastructure.Data.Repositories
{
    public partial class EquipoScrapEntityRepository
    {
        public async Task<IEnumerable<EquipoScrapEntity>> GetTop20Async(string esn)
        {
            IIncludableQueryable<EquipoScrapEntity, EquipoEntity> consultaJoin = this.objectSet
                .Include(e => e.EquipoEntity);

            IQueryable<EquipoScrapEntity> consultaFiltrada = string.IsNullOrWhiteSpace(esn) ? consultaJoin.Where(e => e.Activo && !e.EquipoEntity.ProcesoFinalizado) : consultaJoin.Where(e => e.Activo && !e.EquipoEntity.ProcesoFinalizado && EF.Functions.Like(e.EquipoEntity.Esn, $"%{esn}%"));

            return await consultaFiltrada.Take(20).ToListAsync();
        }

        public async Task<PagedResult<EquipoScrapEntity>> GetPaginadoAsync(bool activaRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
        {
            IIncludableQueryable<EquipoScrapEntity, EquipoEntity> consultaJoin = this.objectSet
                .Include(e => e.EquipoEntity);

            IQueryable<EquipoScrapEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo == activaRecords);

            consultaFiltrada = sortingInfo.ColumnName switch
            {
                "id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
                "equipoId" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoId),
                "fecha" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Fecha),
                "origen" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Origen),
                "detalle" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Detalle),
                "fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
                "usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
                "fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
                "usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
                "fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
                "usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
                "eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
                _ => consultaFiltrada.OrderBy(e => e.Id)
            };

            return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
        }
    }
}
