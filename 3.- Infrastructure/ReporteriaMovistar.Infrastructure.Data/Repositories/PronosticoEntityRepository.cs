//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 26-10-2021 03:18:16 PM
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using ReporteriaMovistar.Domain.Interfaces.Repositories;
using ReporteriaMovistar.Domain.Models.Entities;
using ReporteriaMovistar.Domain.Models.Pagination;
using ReporteriaMovistar.Domain.Models.Sorting;
using ReporteriaMovistar.Infrastructure.Data.Extensions;

namespace ReporteriaMovistar.Infrastructure.Data.Repositories
{
    public partial class PronosticoEntityRepository
    {
	    public async Task<bool> ExistePronosticoAsync(short year, byte month, int technologyId)
	    {
		    IQueryable<PronosticoEntity> consultaFiltrada = this.objectSet.Where(e => e.Activo && e.Ano == year && e.Mes == month && e.TecnologiaId == technologyId);
		    return await consultaFiltrada.AnyAsync();
	    }

	    public async Task<PronosticoEntity> FindConTecnologiaAsync(int id)
	    {
			IIncludableQueryable<PronosticoEntity, EquipoTecnologiaEntity> consultaJoin = this.objectSet
			.Include(p => p.EquipoTecnologiaEntity);

			IQueryable<PronosticoEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo && e.Id == id);

			return await consultaFiltrada.SingleOrDefaultAsync();
	    }

	    public async Task<PagedResult<PronosticoEntity>> GetPaginadoAsync(bool activeRecords, PagerInfo pagerInfo, SortingInfo sortingInfo)
	    {
		    IIncludableQueryable<PronosticoEntity, EquipoTecnologiaEntity> consultaJoin = this.objectSet
				.Include(p => p.EquipoTecnologiaEntity);

			IQueryable<PronosticoEntity> consultaFiltrada = consultaJoin.Where(e => e.Activo == activeRecords);

			consultaFiltrada = sortingInfo.ColumnName switch
			{
				"id" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Id),
				"periodo" => consultaFiltrada.SortPeriodoBy(sortingInfo.Direction),
				"estimacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Estimacion),
				"tecnologia" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.EquipoTecnologiaEntity.Nombre),
				"fecha_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaCreacionRegistro),
				"usuario_creacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioCreacionRegistro),
				"fecha_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaModificacionRegistro),
				"usuario_modificacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioModificacionRegistro),
				"fecha_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.FechaEliminacionRegistro),
				"usuario_eliminacion" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.UsuarioEliminacionRegistro),
				"eliminado" => consultaFiltrada.SortBy(sortingInfo.Direction, e => e.Activo),
				_ => consultaFiltrada.OrderByDescending(e => e.Ano).ThenByDescending(e => e.Mes).ThenBy(e => e.EquipoTecnologiaEntity.Nombre)
			};

			return await consultaFiltrada.GetPagedAsync(pagerInfo.Page, pagerInfo.PageSize);
		}

	    
	}
}
